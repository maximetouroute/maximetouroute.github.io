{"version":3,"sources":["webpack:///./src/components/photo-grid.js","webpack:///./src/layout/blog-post.js"],"names":["photoGridProptypes","gatsbyImages","prop_types_default","a","array","isRequired","photo_grid_PhotoGridTest","PhotoGridTest","props","_this","_React$Component","call","this","state","photoIndex","isOpen","generatePicture","picture","index","margin","src","_this2","className","react_default","createElement","style","backgroundImage","onClick","setState","key","id","generateGrid","pictures","numberPerRow","photoGrid","i","length","photoRow","columnIndex","push","render","_this3","_this$state","images","Fragment","main_default","mainSrc","nextSrc","prevSrc","onCloseRequest","onMovePrevRequest","onMoveNextRequest","Component","PhotoGrid","_ref","srcs","children","filter","child","map","photo","href","propTypes","node","photo_grid","renderAst","rehype_react_default","components","photo-grid","Compiler","Template","post","data","markdownRemark","layout","frontmatter","cover","childImageSharp","fixed","title","subtitle","Date","date","getFullYear","itemScope","itemType","htmlAst","pageQuery"],"mappings":"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","file":"component---src-layout-blog-post-js-c2fcebb2ca2ffd3f84c3.js","sourcesContent":["import React from 'react';\nimport Lightbox from 'react-image-lightbox'\nimport 'react-image-lightbox/style.css' // This only needs to be imported once in your app\nimport PropTypes from 'prop-types'\n\n\n// DIRTY test for custom component.\n/*\n\nThe problem here :\n\nWe want to fetch the images from the markdown folder but graphql queries runned here cannot take any variable and doesnt have access to gatsby context\nThe only way I found to keep a clean syntax is to insert img tags directly in the markdown, they will be transformed by gatsby image (so responsive stuff and all)\nand then those urls can be used (props.href)\n */\n\nfunction styleBackgroundPhoto(src) {\n  return {\n    backgroundImage: 'url(' + src + ')',\n  }\n}\n\nconst photoGridProptypes = { gatsbyImages: PropTypes.array.isRequired }\nclass PhotoGridTest extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      photoIndex: 0,\n      isOpen: false,\n    }\n\n  }\n\n  generatePicture(picture, index, margin) {\n    let className = margin ? `photoThumbnail marginRight` : `photoThumbnail`\n    return (\n      <div className={className} style={styleBackgroundPhoto(picture)}\n           onClick={() => this.setState({ isOpen: true, photoIndex: index })} key={picture.id}/>\n    )\n  }\n\n  //numberPerRow is a WIP, needs changes in sass too\n  generateGrid(pictures, numberPerRow = 3) {\n\n    let photoGrid = []\n    for (let i = 0; i < pictures.length; i += numberPerRow) {\n\n      let photoRow = []\n\n      for (let columnIndex = 0; columnIndex < numberPerRow && i + columnIndex < pictures.length; columnIndex++) {\n        // handle margin right\n        if (columnIndex < numberPerRow) {\n          photoRow.push(this.generatePicture(pictures[i + columnIndex], i + columnIndex, true))\n        } else {\n          photoRow.push(this.generatePicture(pictures[i + columnIndex], i + columnIndex, false))\n        }\n      }\n      photoGrid.push(\n        <div className=\"photoRowContainer\" key={pictures[i].id}>\n          {photoRow}\n        </div>,\n      )\n      photoRow = []\n    }\n    return photoGrid\n  }\n\n\n  render() {\n\n    const { isOpen, photoIndex } = this.state\n    const images = this.props.gatsbyImages;\n\n    return (\n      <>\n        {isOpen && (\n\n          <Lightbox\n            mainSrc={images[photoIndex]}\n            nextSrc={images[(photoIndex + 1) % images.length]}\n            prevSrc={images[(photoIndex + images.length - 1) % images.length]}\n            onCloseRequest={() => this.setState({ isOpen: false })}\n            onMovePrevRequest={() =>\n              this.setState({\n                photoIndex: (photoIndex + images.length - 1) % images.length,\n              })\n            }\n            onMoveNextRequest={() =>\n              this.setState({\n                photoIndex: (photoIndex + 1) % images.length,\n              })\n            }\n          />\n        )}\n\n        <div className=\"photoGrid\">\n          {this.generateGrid(this.props.gatsbyImages)}\n        </div>\n      </>\n\n    )\n  }\n\n}\n\nPhotoGridTest.propTypes = photoGridProptypes;\n\n\nfunction PhotoGrid({ children }) {\n  const photos = children.filter(child => typeof child !== 'string');\n  const srcs = photos.map(photo => photo.props.href);\n  return (\n    <PhotoGridTest gatsbyImages={srcs} />\n  );\n}\n\nPhotoGrid.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default PhotoGrid;","import React from 'react'\nimport Layout from './layout'\nimport './page.scss'\nimport 'moment'\nimport rehypeReact from \"rehype-react\"\nimport PhotoGrid from '../components/photo-grid';\nimport { graphql } from 'gatsby'\n\nconst renderAst = new rehypeReact({\n  createElement: React.createElement,\n  components: { \"photo-grid\": PhotoGrid },\n}).Compiler\n\nexport default function Template({ data }) {\n  const { markdownRemark: post } = data // data.markdownRemark holds our post data\n  return (\n    <Layout>\n      <div className=\"coverBand\"\n           style={{ backgroundImage: 'url(' + post.frontmatter.cover.childImageSharp.fixed.src + ')' }} id=\"content\">\n        <div className=\"overlay\">\n          <div className=\"punchline\">{post.frontmatter.title}</div>\n          <div className=\"subtext\">\n            <p><strong>{post.frontmatter.subtitle} </strong></p>\n            <p><em>{new Date(post.frontmatter.date).getFullYear()}</em></p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"Page\">\n        <article className=\"card\" itemScope itemType=\"http://schema.org/BlogPosting\">\n          <div className=\"article\">\n            <br/><br/>\n            {renderAst(post.htmlAst)}\n          </div>\n        </article>\n      </div>\n    </Layout>\n  )\n}\n\n//  <div className=\"content\" itemProp=\"articleBody\" dangerouslySetInnerHTML={{ __html: post.html }}/>\n\n\nexport const pageQuery = graphql`\n    query BlogPostByPath($path: String!) {\n        markdownRemark(frontmatter: { path: { eq: $path } }) {\n            htmlAst # previously \\`html\\`\n            frontmatter {\n                date(formatString: \"MMMM DD, YYYY\")\n                path\n                title\n                subtitle\n                cover {\n                    childImageSharp {\n                        # Other options include height (set both width and height to crop),\n                        # grayscale, duotone, rotate, etc.\n                        fixed(width: 700) {\n                            # Choose either the fragment including a small base64ed image, a traced placeholder SVG, or one without.\n                            ...GatsbyImageSharpFixed\n                            src\n                        }\n\n                    }\n                }\n                \n            }\n        }\n    }`\n\n\n\n"],"sourceRoot":""}