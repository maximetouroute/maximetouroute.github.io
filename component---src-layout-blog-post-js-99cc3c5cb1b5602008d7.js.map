{"version":3,"sources":["webpack:///./src/components/gatsby-image-compare.js","webpack:///./src/layout/blog-post.js"],"names":["propTypes","leftImage","prop_types_default","a","string","isRequired","rightImage","sliderLineWidth","number","handleSize","hover","bool","skeleton","element","autoReloadSpan","autoReloadLimit","sliderPositionPercentage","gatsby_image_compare_ReactCompareImage","ReactCompareImage","props","_this","_React$Component","call","this","componentDidMount","console","log","containerElement","containerRef","current","css_element_queries","setImagesSize","addEventListener","startSliding","window","finishSliding","componentDidUpdate","prevProps","prevState","info","isImgFullyLoaded","state","underImageRef","src","overImageRef","isLoadingRightImg","isLoadingLeftImg","setState","componentWillUnmount","removeEventListener","autoReloadTasks","forEach","task","clearTimeout","undefined","imageWidth","getBoundingClientRect","width","e","preventDefault","handleSliding","event","pos","touches","pageX","pageXOffset","left","minPos","maxPos","onRightImageLoaded","onLeftImageLoaded","onError","ref","_this$props","retryCount","taskId","setTimeout","push","render","styles","container","boxSizing","position","overflow","marginTop","marginBottom","underImage","display","height","background","overImage","clip","objectFit","top","slider","alignItems","cursor","flexDirection","justifyContent","line","boxShadow","flex","handle","border","backgroundColor","leftArrow","borderRight","marginLeft","marginRight","rightArrow","borderLeft","overlayTextLeft","opacity","overlayTextRight","right","leftWord","textAlign","color","fontWeight","textTransform","padding","rightWord","react_default","createElement","Fragment","style","Object","assign","dataenzyme","onLoad","alt","className","createRef","Component","GatsbyImageCompare","_ref","photos","children","filter","child","href","defaultProps","node","gatsby_image_compare","__webpack_require__","d","__webpack_exports__","Template","pageQuery","renderAst","rehype_react_default","components","photo-grid","photo_grid","image-compare","Compiler","post","data","markdownRemark","layout","id","frontmatter","title","subtitle","Date","date","getFullYear","itemScope","itemType","htmlAst"],"mappings":"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","file":"component---src-layout-blog-post-js-99cc3c5cb1b5602008d7.js","sourcesContent":["import PropTypes from 'prop-types'\nimport React from 'react'\n\n// Gatsby binding for image compare in markdowns\nimport { ResizeSensor } from 'css-element-queries'\n\nconst propTypes = {\n  leftImage: PropTypes.string.isRequired,\n  rightImage: PropTypes.string.isRequired,\n  sliderLineWidth: PropTypes.number,\n  handleSize: PropTypes.number,\n  hover: PropTypes.bool,\n  skeleton: PropTypes.element,\n  autoReloadSpan: PropTypes.number,\n  autoReloadLimit: PropTypes.number,\n  sliderPositionPercentage: PropTypes.number,\n}\n\nconst defaultProps = {\n  sliderLineWidth: 2,\n  handleSize: 40,\n  hover: false,\n  skeleton: null,\n  autoReloadSpan: null,\n  autoReloadLimit: 10,\n  sliderPositionPercentage: 0.75,\n}\n\nclass ReactCompareImage extends React.Component {\n  constructor(props) {\n    super(props)\n    console.log('got constructor');\n    this.state = {\n      sliderPositionPercentage: this.props.sliderPositionPercentage, // 0 to 1\n      imageWidth: 0,\n      isImgFullyLoaded: false,\n    }\n\n    this.containerRef = React.createRef()\n    this.underImageRef = React.createRef()\n    this.overImageRef = React.createRef()\n\n    this.isLoadingRightImg = true\n    this.isLoadingLeftImg = true\n\n    this.autoReloadTasks = []\n\n    this.retryCount = 0\n  }\n\n  componentDidMount = () => {\n    console.log('didmount');\n    const containerElement = this.containerRef.current\n\n    // Re-set images size when container size is changed\n    new ResizeSensor(containerElement, () => {\n      this.setImagesSize()\n    })\n\n    // for mobile\n    containerElement.addEventListener('touchstart', this.startSliding)\n    window.addEventListener('touchend', this.finishSliding)\n\n    // for desktop\n    if (this.props.hover) {\n      containerElement.addEventListener('mouseenter', this.startSliding)\n      containerElement.addEventListener('mouseleave', this.finishSliding)\n    } else {\n      containerElement.addEventListener('mousedown', this.startSliding)\n      window.addEventListener('mouseup', this.finishSliding)\n    }\n  }\n\n  componentDidUpdate = (prevProps, prevState) => {\n    console.info('did update');\n    // do initial setup if loading images and DOM constructing are fully done\n    if (\n      prevState.isImgFullyLoaded === false &&\n      this.state.isImgFullyLoaded === true\n    ) {\n      this.setImagesSize()\n    }\n\n    // show skeleton again if given images are changed\n    if (\n      this.props.leftImage !== prevProps.leftImage ||\n      this.props.rightImage !== prevProps.rightImage\n    ) {\n      this.underImageRef.current.src = null\n      this.overImageRef.current.src = null\n\n      this.isLoadingRightImg = true\n      this.isLoadingLeftImg = true\n      this.setState({\n        isImgFullyLoaded: false,\n      })\n\n      this.underImageRef.current.src = this.props.rightImage\n      this.overImageRef.current.src = this.props.leftImage\n    }\n  }\n\n  componentWillUnmount = () => {\n    this.finishSliding()\n    window.removeEventListener('mouseup', this.finishSliding)\n    window.removeEventListener('touchend', this.finishSliding)\n    this.autoReloadTasks.forEach(task => clearTimeout(task))\n  }\n\n  setImagesSize = () => {\n    // Image size set as follows.\n    //\n    // 1. set under image size like so:\n    //     width  = 100% of container width\n    //     height = auto\n    //\n    // 2. set over imaze size like so:\n    //     width  = 100% of container width\n    //     height = under image's height\n    //              (protrudes is hidden by css 'object-fit: hidden')\n    console.log('test hast5?0');\n    if(this.underImageRef === undefined )\n    {\n      console.log('ITS UNDEFINED');\n      this.setState({\n        imageWidth: 200\n      })\n    }\n    else if(this.underImageRef === null)\n    {\n      console.log('its null');\n      this.setState({\n        imageWidth: 200\n      })\n    }\n    else\n{\n  console.log('its ok');\n  this.setState({\n    imageWidth: this.underImageRef.current.getBoundingClientRect().width,\n  })\n}\n\n  }\n\n  startSliding = e => {\n    // Prevent default behavior other than mobile scrolling\n    if (!('touches' in e)) {\n      e.preventDefault()\n    }\n\n    // Slide the image even if you just click or tap (not drag)\n    this.handleSliding(e)\n\n    window.addEventListener('mousemove', this.handleSliding)\n    window.addEventListener('touchmove', this.handleSliding)\n  }\n\n  finishSliding = () => {\n    window.removeEventListener('mousemove', this.handleSliding)\n    window.removeEventListener('touchmove', this.handleSliding)\n  }\n\n  handleSliding = event => {\n    const e = event || window.event\n\n    // Calc Cursor Position from the left edge of the viewport\n    const cursorXfromViewport = e.touches ? e.touches[0].pageX : e.pageX\n\n    // Calc Cursor Position from the left edge of the window (consider any page scrolling)\n    const cursorXfromWindow = cursorXfromViewport - window.pageXOffset\n\n    // Calc Cursor Position from the left edge of the image\n    const imagePosition = this.underImageRef.current.getBoundingClientRect()\n    let pos = cursorXfromWindow - imagePosition.left\n\n    // Set minimum and maximum values ​​to prevent the slider from overflowing\n    const minPos = 0 + this.props.sliderLineWidth / 2\n    const maxPos = this.state.imageWidth - this.props.sliderLineWidth / 2\n\n    if (pos < minPos) pos = minPos\n    if (pos > maxPos) pos = maxPos\n\n    this.setState({\n      sliderPositionPercentage: pos / this.state.imageWidth,\n    })\n  }\n\n  onRightImageLoaded = () => {\n    console.log('onrightimgl');\n    this.isLoadingRightImg = false\n\n    if (!this.isLoadingRightImg && !this.isLoadingLeftImg) {\n      this.setState({ isImgFullyLoaded: true })\n    }\n  }\n\n  onLeftImageLoaded = () => {\n    console.log('onleftimgl');\n    this.isLoadingLeftImg = false\n    if (!this.isLoadingRightImg && !this.isLoadingLeftImg) {\n      this.setState({ isImgFullyLoaded: true })\n    }\n  }\n\n  onError = (ref, src) => {\n    console.log('onerror');\n    const { autoReloadSpan, autoReloadLimit } = this.props\n\n    if (!autoReloadSpan) return\n    if (this.retryCount >= autoReloadLimit) return\n\n    const taskId = setTimeout(() => {\n      ref.current.src = null\n      ref.current.src = src\n    }, autoReloadSpan)\n    this.autoReloadTasks.push(taskId)\n\n    this.retryCount += 1\n  }\n\n  render = () => {\n    const styles = {\n      container: {\n        boxSizing: 'border-box',\n        position: 'relative',\n        width: '100%',\n        overflow: 'hidden',\n        marginTop:'1em',\n        marginBottom:'1em'\n      },\n      underImage: {\n        display: 'block',\n        height: 'auto', // Respect the aspect ratio\n        width: '100%',\n        background: `url(${this.props.underImage})`,\n      },\n      overImage: {\n        clip: `rect(auto, ${this.state.imageWidth *\n        this.state.sliderPositionPercentage}px, auto, auto)`,\n        display: 'block',\n        height: '100%', // fit to the height of under image\n        objectFit: 'cover', // protrudes is hidden\n        position: 'absolute',\n        top: 0,\n        width: '100%',\n      },\n      slider: {\n        alignItems: 'center',\n        cursor: !this.props.hover && 'ew-resize',\n        display: 'flex',\n        flexDirection: 'column',\n        height: '100%',\n        justifyContent: 'center',\n        left:\n          this.state.imageWidth * this.state.sliderPositionPercentage -\n          this.props.handleSize / 2 +\n          'px',\n        position: 'absolute',\n        top: 0,\n        width: `${this.props.handleSize}px`,\n      },\n      line: {\n        background: 'white',\n        boxShadow:\n          '0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)',\n        flex: '0 1 auto',\n        height: '100%',\n        width: `${this.props.sliderLineWidth}px`,\n      },\n      handle: {\n        alignItems: 'center',\n        border: `${this.props.sliderLineWidth}px solid white`,\n        boxShadow:\n          '0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)',\n        boxSizing: 'border-box',\n        display: 'flex',\n        flex: '1 0 auto',\n        height: `80px`,\n        justifyContent: 'center',\n        width: `10px`,\n        backgroundColor: `white`,\n      },\n      leftArrow: {\n        border: `inset ${this.props.handleSize * 0.15}px rgba(0,0,0,0)`,\n        borderRight: `${this.props.handleSize * 0.15}px solid white`,\n        height: '0px',\n        marginLeft: `-${this.props.handleSize * 0.50}px`, // for IE11\n        marginRight: `${this.props.handleSize * 0.50}px`,\n        width: '0px',\n      },\n      rightArrow: {\n        border: `inset ${this.props.handleSize * 0.15}px rgba(0,0,0,0)`,\n        borderLeft: `${this.props.handleSize * 0.15}px solid white`,\n        height: '0px',\n        marginRight: `-${this.props.handleSize * 0.50}px`, // for IE11\n        width: '0px',\n      },\n      overlayTextLeft: {\n        alignItems: 'flex-start',\n        display: 'flex',\n        flexDirection: 'column',\n        //height: '50px',\n        justifyContent: 'center',\n        left: `${this.state.imageWidth}-100px`,\n        position: 'absolute',\n        top: 0,\n        // width: `100px`,\n        backgroundColor:'rgba(0,0,0,0.5)',\n        opacity: this.state.sliderPositionPercentage\n      },\n      overlayTextRight: {\n        alignItems: 'flex-end',\n        display: 'flex',\n        flexDirection: 'column',\n        justifyContent: 'center',\n        right: `0`,\n        position: 'absolute',\n        top: 0,\n        backgroundColor: 'rgba(0,0,0,0.5)',\n        opacity: 1-this.state.sliderPositionPercentage\n      },\n      leftWord: {\n        textAlign: 'left',\n        color: 'white',\n        fontWeight: 400,\n        textTransform: 'uppercase',\n        padding: '1em',\n      },\n      rightWord: {\n        textAlign: 'right',\n        color: 'white',\n        fontWeight: 400,\n        textTransform: 'uppercase',\n        padding: '1em',\n      }\n    }\n\n    return (\n      <React.Fragment>\n        {this.props.skeleton &&\n        !this.state.isImgFullyLoaded && (\n          <div style={{ ...styles.container }}>{this.props.skeleton}</div>\n        )}\n\n\n        <div\n          style={{\n            ...styles.container,\n            display: this.state.isImgFullyLoaded ? 'block' : 'none',\n          }}\n          ref={this.containerRef}\n          dataenzyme=\"container\"\n        >\n\n\n\n          <img\n            onLoad={() => {this.onLeftImageLoaded()}}\n            onError={() =>\n              this.onError(this.underImageRef, this.props.rightImage)\n            }\n            alt=\"left\"\n            className=\"img-comp-under\"\n            ref={this.underImageRef}\n            src={this.props.rightImage}\n            style={styles.underImage}\n          />\n\n\n          <img\n            onLoad={() => {this.onRightImageLoaded()}}\n            onError={() =>\n              this.onError(this.overImageRef, this.props.leftImage)\n            }\n            alt=\"right\"\n            className=\"img-comp-over\"\n            ref={this.overImageRef}\n            src={this.props.leftImage}\n            style={styles.overImage}\n          />\n\n          <div style={styles.overlayTextRight}>\n              <span style={styles.leftWord}>\n                RAW\n              </span>\n          </div>\n          <div style={styles.overlayTextLeft}>\n              <span style={styles.leftWord}>\n                GRADED\n              </span>\n          </div>\n          <div className=\"img-comp-slider\" style={styles.slider}>\n\n            <div style={styles.line}/>\n            <div style={styles.handle}>\n              <div style={styles.leftArrow}/>\n              <div style={styles.rightArrow}/>\n            </div>\n            <div style={styles.line}/>\n\n          </div>\n        </div>\n      </React.Fragment>\n    )\n  }\n}\n\nReactCompareImage.propTypes = propTypes\nReactCompareImage.defaultProps = defaultProps\n\n\nfunction GatsbyImageCompare({ children }) {\n  const photos = children.filter(child => typeof child !== 'string');\n  const leftImage = photos[0].props.href;\n  const rightImage = photos[1].props.href;\n  console.log(\"---------------\");\n  console.log(\"left\" + leftImage);\n  console.log('right' + rightImage);\n  return (\n    <ReactCompareImage leftImage={leftImage} rightImage={rightImage} />\n  );\n}\n\nGatsbyImageCompare.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default GatsbyImageCompare;","import React from 'react'\nimport Layout from './layout'\nimport './page.scss'\nimport 'moment'\nimport rehypeReact from \"rehype-react\"\nimport PhotoGrid from '../components/photo-grid';\nimport ImageCompare from '../components/gatsby-image-compare';\nimport { graphql } from 'gatsby'\n\nconst renderAst = new rehypeReact({\n  createElement: React.createElement,\n  components: { \"photo-grid\": PhotoGrid, \"image-compare\": ImageCompare },\n}).Compiler\n\n\n/* style={{ backgroundImage: 'url(' + post.frontmatter.cover.childImageSharp.fixed.src + ')' }}*/\nexport default function Template({ data }) {\n  const { markdownRemark: post } = data // data.markdownRemark holds our post data\n  return (\n    <Layout>\n      <div className=\"coverBand\"\n           id=\"content\">\n        <div className=\"overlay\">\n          <div className=\"punchline\">{post.frontmatter.title}</div>\n          <div className=\"subtext\">\n            <p><strong>{post.frontmatter.subtitle} </strong></p>\n            <p><em>{new Date(post.frontmatter.date).getFullYear()}</em></p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"Page\">\n        <article className=\"card\" itemScope itemType=\"http://schema.org/BlogPosting\">\n          <div className=\"article\">\n            <br/><br/>\n            {renderAst(post.htmlAst)}\n          </div>\n        </article>\n      </div>\n    </Layout>\n  )\n}\n\n//  <div className=\"content\" itemProp=\"articleBody\" dangerouslySetInnerHTML={{ __html: post.html }}/>\n\n\nexport const pageQuery = graphql`\n    query BlogPostByPath($path: String!) {\n        markdownRemark(frontmatter: { path: { eq: $path } }) {\n            htmlAst # previously \\`html\\`\n            frontmatter {\n                date(formatString: \"MMMM DD, YYYY\")\n                path\n                title\n                subtitle\n                cover {\n                    childImageSharp {\n                        # Other options include height (set both width and height to crop),\n                        # grayscale, duotone, rotate, etc.\n                        fixed(width: 700) {\n                            # Choose either the fragment including a small base64ed image, a traced placeholder SVG, or one without.\n                            ...GatsbyImageSharpFixed\n                            src\n                        }\n\n                    }\n                }\n                \n            }\n        }\n    }`\n\n\n\n"],"sourceRoot":""}