{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es6.string.fixed.js","webpack:///./node_modules/core-js/modules/_string-html.js","webpack:///./src/bits/PostGrid/PostGrid.js","webpack:///./src/pages/index.js"],"names":["createHTML","this","$export","fails","defined","quot","string","tag","attribute","value","S","String","p1","replace","module","exports","NAME","exec","O","P","F","test","toLowerCase","split","length","PostGrid","render","posts","props","className","filter","post","node","frontmatter","title","map","to","path","key","id","style","backgroundImage","image","childImageSharp","fixed","src","subtitle","React","Component","Index","data","allMarkdownRemark","edges","MainLayout","MetaTags","portfolioPostsQuery"],"mappings":"6FAEA,EAAQ,OAAR,CAA0B,SAAS,SAAUA,GAC3C,OAAO,WACL,OAAOA,EAAWC,KAAM,KAAM,GAAI,S,qBCJtC,IAAIC,EAAU,EAAQ,QAClBC,EAAQ,EAAQ,QAChBC,EAAU,EAAQ,QAClBC,EAAO,KAEPL,EAAa,SAAUM,EAAQC,EAAKC,EAAWC,GACjD,IAAIC,EAAIC,OAAOP,EAAQE,IACnBM,EAAK,IAAML,EAEf,MADkB,KAAdC,IAAkBI,GAAM,IAAMJ,EAAY,KAAOG,OAAOF,GAAOI,QAAQR,EAAM,UAAY,KACtFO,EAAK,IAAMF,EAAI,KAAOH,EAAM,KAErCO,EAAOC,QAAU,SAAUC,EAAMC,GAC/B,IAAIC,EAAI,GACRA,EAAEF,GAAQC,EAAKjB,GACfE,EAAQA,EAAQiB,EAAIjB,EAAQkB,EAAIjB,GAAM,WACpC,IAAIkB,EAAO,GAAGL,GAAM,KACpB,OAAOK,IAASA,EAAKC,eAAiBD,EAAKE,MAAM,KAAKC,OAAS,KAC7D,SAAUN,K,8HCZKO,E,gLAEjBC,OAAA,WACI,IAAMC,EAAQ1B,KAAK2B,MAAMD,MAEzB,OACI,yBAAKE,UAAU,YACdF,EACEG,QAAO,SAAAC,GAAI,OAAIA,EAAKC,KAAKC,YAAYC,MAAMV,OAAS,KACpDW,KAAI,YAAqB,IAAZJ,EAAW,EAAjBC,KACN,OACE,kBAAC,OAAD,CACEH,UAAU,OACVO,GAAOL,EAAKE,YAAYI,KAAtB,WACFC,IAAKP,EAAKQ,IAEV,yBACEV,UAAU,SACVW,MAAO,CACLC,gBACE,OACAV,EAAKE,YAAYS,MAAMC,gBAAgBC,MAAMC,IAC7C,MAGJ,yBAAKhB,UAAU,UACb,0BAAMA,UAAU,SACbE,EAAKE,YAAYC,OAEpB,0BAAML,UAAU,OACbE,EAAKE,YAAYa,kB,GA9BNC,IAAMC,W,UCE7B,SAASC,EAAT,GAA0B,IACxBtB,EADuB,EAARuB,KACAC,kBAAtBC,MAER,OACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAUpB,MAAO,SACjB,yBAAKL,UAAU,QACb,kBAAC,EAAD,CAAUF,MAAOA,IACjB,yBAAKE,UAAU,gBACb,kBAAC,OAAD,CAAMO,GAAG,UAAT,eAhBV,4FAuBO,IAAMmB,EAAmB","file":"component---src-pages-index-js-337a39503028d1cec09a.js","sourcesContent":["'use strict';\n// B.2.3.6 String.prototype.fixed()\nrequire('./_string-html')('fixed', function (createHTML) {\n  return function fixed() {\n    return createHTML(this, 'tt', '', '');\n  };\n});\n","var $export = require('./_export');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar quot = /\"/g;\n// B.2.3.2.1 CreateHTML(string, tag, attribute, value)\nvar createHTML = function (string, tag, attribute, value) {\n  var S = String(defined(string));\n  var p1 = '<' + tag;\n  if (attribute !== '') p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n};\nmodule.exports = function (NAME, exec) {\n  var O = {};\n  O[NAME] = exec(createHTML);\n  $export($export.P + $export.F * fails(function () {\n    var test = ''[NAME]('\"');\n    return test !== test.toLowerCase() || test.split('\"').length > 3;\n  }), 'String', O);\n};\n","import React from 'react'\nimport { Link } from 'gatsby'\nimport './PostGrid.scss'\n\n\nexport default class PostGrid extends React.Component {\n\n    render() {\n        const posts = this.props.posts;\n\n        return (\n            <div className=\"postGrid\">\n            {posts\n              .filter(post => post.node.frontmatter.title.length > 0)\n              .map(({ node: post }) => {\n                return (\n                  <Link\n                    className=\"post\"\n                    to={`${post.frontmatter.path}#content`}\n                    key={post.id}\n                  >\n                    <div\n                      className=\"header\"\n                      style={{\n                        backgroundImage:\n                          'url(' +\n                          post.frontmatter.image.childImageSharp.fixed.src +\n                          ')',\n                      }}\n                    >\n                      <div className=\"inside\">\n                        <span className=\"title\">\n                          {post.frontmatter.title}\n                        </span>\n                        <span className=\"tag\">\n                          {post.frontmatter.subtitle}\n                        </span>\n                      </div>\n                    </div>\n                  </Link>\n                )\n              })}\n          </div>\n        )\n    }\n}","import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport MainLayout from '../layout/MainLayout'\nimport MetaTags from '../bits/MetaTags/MetaTags'\nimport PostGrid from '../bits/PostGrid/PostGrid'\nimport './index.scss'\n\nexport default function Index({ data }) {\n  const { edges: posts } = data.allMarkdownRemark\n\n  return (\n    <MainLayout>\n      <MetaTags title={'Home'} />\n      <div className=\"home\">\n        <PostGrid posts={posts}></PostGrid>\n        <div className=\"moreProjects\">\n          <Link to=\"/about\">About me</Link>\n        </div>\n      </div>\n    </MainLayout>\n  )\n}\n\nexport const portfolioPostsQuery = graphql`\n  query IndexQuery {\n    allMarkdownRemark(\n      sort: { order: DESC, fields: [frontmatter___date] }\n      filter: { frontmatter: { category: { eq: \"portfolio\" } } }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 250)\n          id\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            category\n            subtitle\n            image {\n              childImageSharp {\n                # Other options include height (set both width and height to crop),\n                # grayscale, duotone, rotate, etc.\n                fixed(width: 700) {\n                  # Choose either the fragment including a small base64ed image, a traced placeholder SVG, or one without.\n                  ...GatsbyImageSharpFixed\n                  src\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}