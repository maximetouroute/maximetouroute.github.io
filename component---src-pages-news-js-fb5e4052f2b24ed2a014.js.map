{"version":3,"sources":["webpack:///./src/pages/news.js"],"names":["News","orderedEvents","data","allIcal","edges","sort","a","b","Date","node","start","getTime","today","pastEvents","filter","end","presentEvents","futureEvents","eventMaker","event","startDate","toISOString","substring","endDate","dates","urlRegex","description","replace","_","descWithNoUrls","formattedDescription","split","map","part","urls","match","style","lineHeight","marginBottom","key","summary","location","url","href","titleStyle","textAlign","marginTop","borderLeft","paddingLeft","title","className","itemProp","color","to","newsQuery"],"mappings":"6SAMe,SAASA,EAAT,GAAyB,IAGhCC,EAH+B,EAARC,KACEC,QAAvBC,MAEqBC,MAAK,SAACC,EAAGC,GACpC,OAAO,IAAIC,KAAKD,EAAEE,KAAKC,OAAOC,UAAY,IAAIH,KAAKF,EAAEG,KAAKC,OAAOC,aAG7DC,EAAQ,IAAIJ,KACZK,EAAaZ,EAAca,QAAO,YAAe,IAAZL,EAAW,EAAXA,KACzC,OAAO,IAAID,KAAKC,EAAKM,KAAOH,KAExBI,EAAgBf,EAAca,QAAO,YAAe,IAAZL,EAAW,EAAXA,KAC5C,OAAQ,IAAID,KAAKC,EAAKC,QAAUE,EAAUA,GAAS,IAAIJ,KAAKC,EAAKM,QAE7DE,EAAehB,EAAca,QAAO,YAAe,IAAZL,EAAW,EAAXA,KAC3C,OAAOG,EAAQ,IAAIJ,KAAKC,EAAKC,UAGzBQ,EAAa,SAAAC,GACjB,IAAMC,EAAY,IAAIZ,KAAKW,EAAMT,OAAOW,cAAcC,UAAU,EAAG,IAC7DC,EAAU,IAAIf,KAAKW,EAAMJ,KAAKM,cAAcC,UAAU,EAAG,IACzDE,EACJJ,IAAcG,EAAd,GAA2BH,EAAiBA,EAA5C,MAA2DG,EACvDE,EAAW,8EAIjBN,EAAMO,YAAcP,EAAMO,YAAYC,QAHD,mBAKnC,SAAAC,GACE,MAAO,MAIXT,EAAMO,YAAcP,EAAMO,YAAYC,QAAQ,SAAS,SAAAC,GACrD,MAAO,MAGTT,EAAMO,YAAcP,EAAMO,YAAYC,QAAQ,MAAM,SAAAC,GAClD,MAAO,MAGT,IAAMC,EAAiBV,EAAMO,YAAYC,QAAQF,GAAU,WACzD,MAAO,MAGHK,EACJ,oCACGD,EAAeE,MAAM,OAAOC,KAAI,SAAAC,GAC/B,OACE,oCACGA,EACD,kCAMJC,EAAOf,EAAMO,YAAYS,MAAMV,IAAa,GAElD,OACE,yBAAKW,MAAO,CAAEC,WAAY,IAAKC,aAAc,OAASC,IAAKpB,EAAMqB,SAC/D,wBAAIJ,MAAO,CAAEE,aAAc,UAAYnB,EAAMqB,SAC7C,6BACE,gCAAShB,IAEVL,EAAMsB,UAAY,0CAAgBtB,EAAMsB,UACzC,2BACGX,EAEAI,EAAKF,KAAI,SAAAU,GAAG,OACX,oCACE,uBAAGC,KAAMD,GAAMA,GACf,oCAQNE,EAAa,CACjBC,UAAW,GACXC,UAAW,MACXR,aAAc,MACdS,WAAY,oBACZC,YAAa,SAEf,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAUC,MAAO,SACjB,yBAAKC,UAAU,QACb,6BAASA,UAAU,gBACjB,6BACA,6BACA,6BACA,yBAAKA,UAAU,UAAUC,SAAS,eAChC,wBAAIf,MAAK,iBAAOQ,EAAP,CAAmBQ,MAAO,aAAnC,uBAGCpC,EAAcgB,KAAI,YAAe,IAAZvB,EAAW,EAAXA,KACpB,OAAOS,EAAWT,MAEpB,wBAAI2B,MAAK,iBAAOQ,EAAP,CAAmBQ,MAAO,aAAnC,mBACCnC,EAAae,KAAI,YAAe,IAAZvB,EAAW,EAAXA,KACnB,OAAOS,EAAWT,MAEpB,wBAAI2B,MAAOQ,GAAX,eACC/B,EAAWmB,KAAI,YAAe,IAAZvB,EAAW,EAAXA,KACjB,OAAOS,EAAWT,OAGtB,6BACA,6BACA,kBAAC,OAAD,CAAM4C,GAAG,KAAT,cAOH,IAAMC,EAAS","file":"component---src-pages-news-js-fb5e4052f2b24ed2a014.js","sourcesContent":["import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport MainLayout from '../layout/MainLayout'\nimport MetaTags from '../bits/MetaTags/MetaTags'\nimport './../layout/Layouts.scss'\n\nexport default function News({ data }) {\n  const { edges: events } = data.allIcal\n  // Newest to oldest\n  const orderedEvents = events.sort((a, b) => {\n    return new Date(b.node.start).getTime() - new Date(a.node.start).getTime()\n  })\n\n  const today = new Date()\n  const pastEvents = orderedEvents.filter(({ node }) => {\n    return new Date(node.end) < today\n  })\n  const presentEvents = orderedEvents.filter(({ node }) => {\n    return (new Date(node.start) <= today) & (today <= new Date(node.end))\n  })\n  const futureEvents = orderedEvents.filter(({ node }) => {\n    return today < new Date(node.start)\n  })\n\n  const eventMaker = event => {\n    const startDate = new Date(event.start).toISOString().substring(0, 10)\n    const endDate = new Date(event.end).toISOString().substring(0, 10)\n    const dates =\n      startDate === endDate ? `${startDate}` : `${startDate} â†’ ${endDate}`\n    const urlRegex = /(\\b(https?|ftp|file):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/gi\n    const htmlTagsAndTheirContentRegex = /<\\/?[^>]+(>|$)/g ///<[^>]*>/ ;///(<([^>]+)>.*<([^>]+)>)/;\n\n    // Clean possible presence of useless html tags from google calendar\n    event.description = event.description.replace(\n      htmlTagsAndTheirContentRegex,\n      _ => {\n        return ''\n      }\n    )\n    // Stuff like &amp; and other html codes\n    event.description = event.description.replace(/&.*;/g, _ => {\n      return ''\n    })\n    // Remove all dirty formatting from google calendar mess\n    event.description = event.description.replace('\\n', _ => {\n      return ''\n    })\n    // Deode customely encoded break lines\n    const descWithNoUrls = event.description.replace(urlRegex, () => {\n      return ''\n    })\n\n    const formattedDescription = (\n      <>\n        {descWithNoUrls.split(/BR/g).map(part => {\n          return (\n            <>\n              {part}\n              <br />\n            </>\n          )\n        })}\n      </>\n    )\n    const urls = event.description.match(urlRegex) || []\n\n    return (\n      <div style={{ lineHeight: 1.5, marginBottom: '2em' }} key={event.summary}>\n        <h3 style={{ marginBottom: '0.5em' }}>{event.summary}</h3>\n        <div>\n          <strong>{dates}</strong>\n        </div>\n        {event.location && <div>Location: {event.location}</div>}\n        <p>\n          {formattedDescription}\n\n          {urls.map(url => (\n            <>\n              <a href={url}>{url}</a>\n              <br />\n            </>\n          ))}\n        </p>\n      </div>\n    )\n  }\n\n  const titleStyle = {\n    textAlign: '',\n    marginTop: '2em',\n    marginBottom: '2em',\n    borderLeft: '5px solid #bfceee',\n    paddingLeft: '0.5em',\n  }\n  return (\n    <MainLayout>\n      <MetaTags title={'News'} />\n      <div className=\"Page\">\n        <article className=\"card article\">\n          <br />\n          <br />\n          <br />\n          <div className=\"content\" itemProp=\"articleBody\">\n            <h2 style={{ ...titleStyle, color: '#3568cf' }}>\n              Currently Happening\n            </h2>\n            {presentEvents.map(({ node }) => {\n              return eventMaker(node)\n            })}\n            <h2 style={{ ...titleStyle, color: '#3568cf' }}>Upcoming Events</h2>\n            {futureEvents.map(({ node }) => {\n              return eventMaker(node)\n            })}\n            <h2 style={titleStyle}>Past Events</h2>\n            {pastEvents.map(({ node }) => {\n              return eventMaker(node)\n            })}\n          </div>\n          <br />\n          <br />\n          <Link to=\"/\">Go Home</Link>\n        </article>\n      </div>\n    </MainLayout>\n  )\n}\n\nexport const newsQuery = graphql`\n  query NewsQuery {\n    allIcal {\n      edges {\n        node {\n          start\n          end\n          summary\n          description\n          location\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}