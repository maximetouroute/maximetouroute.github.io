{"version":3,"file":"component---src-pages-index-tsx-efaebde56199b100755d.js","mappings":"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","sources":["webpack://maxime-touroute-portfolio/./src/bits/PostGridFlat/styles.ts","webpack://maxime-touroute-portfolio/./src/bits/PostGridFlat/PostGridFlat.tsx","webpack://maxime-touroute-portfolio/./src/locales/strings.tsx","webpack://maxime-touroute-portfolio/./src/pages/index.tsx"],"sourcesContent":["import { CSSObject } from '@emotion/react';\n\nimport { breakpointKey } from '../styles/styles';\n\nconst blackLink ='#4c4c4c';\n\nexport const postCSS: CSSObject = {\n\n  display: 'flex',\n  flexDirection: 'column',\n\n  // border-radius: 5px;\n  backgroundColor: 'transparent',\n  // border: solid 2px $black\n  transform: 'scale(0.98)',\n  fontSize: '1rem',\n\n  color: blackLink,\n  opacity: 0.9,\n\n  // transition: `-webkit-transform 250ms cubic-bezier(0.4, 0, 0.2, 1),\n  //   transform 250ms cubic-bezier(0.4, 0, 0.2, 1),\n  //   filter 250ms cubic-bezier(0.4, 0, 0.2, 1),\n  //   opacity 250ms cubic-bezier(0.4, 0, 0.2, 1)`,\n  transition: `color 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    transform 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    filter 250ms cubic-bezier(0.4, 0, 0.2, 1),\n    opacity 250ms cubic-bezier(0.4, 0, 0.2, 1)`,\n  textDecoration: 'none', // Post is a link element\n  // &:hover {\n  //   transition: -webkit-transform 250ms cubic-bezier(0.4, 0, 0.2, 1),\n  //   transform 250ms cubic-bezier(0.4, 0, 0.2, 1),\n  //   filter 250ms cubic-bezier(0.4, 0, 0.2, 1),\n  //   opacity 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  // }\n\n [breakpointKey('small')]: {\n    width: '90vw',\n    height: '70vw',\n    marginTop: '1em',\n    marginCottom: '1em',\n    opacity: 1,\n    '&:hover': {\n      transform: 'none',\n      cursor: 'pointer'\n    },\n  },\n\n  [breakpointKey('normal')]: {\n    margin: '1em',\n    width: '60vw',\n    height: '30vw',\n    maxWidth: '30em',\n    maxHeight: '20em',\n    opacity: 1\n  },\n\n    '&:hover': {\n      border: 'none',\n      // transition: border 0.5s ease-out;\n      cursor: 'pointer',\n      transform: 'scale(1)',\n      color: 'white',\n      opacity: 1\n    }\n};\n\n\n  export const postHeadCSS: CSSObject = {\n    display: 'flex',\n    flexDirection: 'column'\n  };\n\n  export const postTitleCSS: CSSObject = {\n    // padding: 2em;\n    // border-radius: 5px;\n    fontSize: '1.5em',\n    // color: $blackLink;\n    fontWeight: 600,\n    padding:'0.5rem',\n    paddingBottom: 0,\n    paddingLeft: 0,\n    // background-color: $backgroundColorForText;\n    // box-decoration-break: clone;\n    marginBottom: 0\n  };\n\nexport const postSubtitleCSS: CSSObject = {\n      // border-radius: 5px;\n      fontSize: '1em',\n      // color: $blackLink;\n      // background-color: $backgroundText;\n      boxDecorationBreak: 'clone',\n      padding: '0.5rem',\n      paddingLeft: 0\n    };\n\n\nexport const postPictureCSS: CSSObject = {\n  flexGrow: 1,\n  backgroundRepeat: 'no-repeat',\n  backgroundSize:'cover',\n  backgroundPosition: 'center top'\n};\n","import { CSSObject } from '@emotion/react';\nimport { Link } from 'gatsby';\nimport { BgImage } from 'gbimage-bridge';\nimport { getImage } from 'gatsby-plugin-image';\nimport { postCSS, postHeadCSS, postPictureCSS, postSubtitleCSS, postTitleCSS } from './styles';\n\nconst gridCSS: CSSObject = {\n  margin: 'auto',\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'center',\n  flexWrap: 'wrap',\n  maxWidth: '90rem',\n  // height: 30em;\n  width: '100%',\n\n  padding: 0,\n};\n\nconst customTextColorOnHover = (color: string): CSSObject => {\n  return {\n    '&:hover': {\n      color: `${color} !important`,\n    },\n  };\n};\n\ninterface OwnProps {\n  posts: any;\n}\nexport default function PostGridFlat({ posts }: OwnProps) {\n  return (\n    <div css={gridCSS}>\n      {posts\n        .filter((post) => post.node.frontmatter.title.length > 0)\n        .map(({ node: post }) => {\n          const image = post.frontmatter.image.childImageSharp;\n          const gatsbyImage = getImage(image);\n          const customColor = post.frontmatter.image.colors !== void 0;\n          const customcolorCSS: CSSObject = customColor\n            ? customTextColorOnHover(post.frontmatter.image.colors.vibrant)\n            : {};\n          return (\n            <Link\n              css={{...postCSS, ...customcolorCSS}}\n              to={`${post.frontmatter.path}#content`}\n              key={post.id}\n            >\n              <div css={postHeadCSS}>\n                <span css={postTitleCSS}>{post.frontmatter.title}</span>\n                <span css={postSubtitleCSS}>\n                  {post.frontmatter.subtitle}{' '}\n                </span>\n              </div>\n              <BgImage image={gatsbyImage} css={postPictureCSS} />\n            </Link>\n          );\n        })}\n    </div>\n  );\n}\n","import { LanguageServiceMode } from 'typescript'\nimport { LangCode } from './locales'\n\nexport const strings: Record<string, Record<LangCode, string>> = {\n  aboutMe: {\n    en: 'About',\n    fr: 'A propos',\n  },\n}\n","import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport MainLayout from '../layout/MainLayout'\nimport SEO from '../bits/SEO/SEO'\nimport PostGrid from '../bits/PostGridFlat/PostGridFlat'\nimport { Theme, useTheme, CSSObject, ThemeProvider } from '@emotion/react'\nimport { themedACSS } from '../bits/styles/styles'\nimport { strings } from '../locales/strings'\nconst homeCSS = {\n  marginTop: '4rem',\n}\n\nconst moreProjectsCSS = (theme: Theme): CSSObject => {\n  return {\n    fontSize: '1.5rem',\n    display: 'grid',\n    justifySelf: 'center',\n    justifyItems: 'center',\n\n    a: {\n      textAlign: 'center',\n      margin: '1rem',\n      marginTop: '4rem',\n      ...themedACSS(theme.palette.primary.main),\n    },\n  }\n}\n\nexport default function Index({ data, pageContext: { langCode }, location }) {\n  // const LOCAL = indexPageStrings[langCode];\n  const posts = data.allMdx.edges\n  const postsInMyLang = posts.filter(\n    (post) => post.node.frontmatter.language === langCode\n  )\n\n  return (\n    <MainLayout language={langCode} location={{ ...location }}>\n      <SEO title={'Home'} langCode={langCode} />\n      <div css={homeCSS}>\n        <PostGrid posts={postsInMyLang} />\n        <div css={(theme) => moreProjectsCSS(theme)}>\n          <Link to=\"/about\">{strings['aboutMe'][langCode]}</Link>\n        </div>\n      </div>\n    </MainLayout>\n  )\n}\n\nexport const portfolioPostsQuery = graphql`\n  query IndexQuery {\n    allMdx(\n      sort: { order: ASC, fields: [frontmatter___priority] }\n      filter: { frontmatter: { category: { eq: \"portfolio\" } } }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 250)\n          id\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            category\n            subtitle\n            language\n            image {\n              colors {\n                ...GatsbyImageColors\n              }\n              childImageSharp {\n                gatsbyImageData(height: 500, placeholder: BLURRED)\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["postCSS","display","flexDirection","backgroundColor","transform","fontSize","color","opacity","transition","textDecoration","breakpointKey","width","height","marginTop","marginCottom","cursor","margin","maxWidth","maxHeight","border","postHeadCSS","postTitleCSS","fontWeight","padding","paddingBottom","paddingLeft","marginBottom","postSubtitleCSS","boxDecorationBreak","postPictureCSS","flexGrow","backgroundRepeat","backgroundSize","backgroundPosition","gridCSS","justifyContent","flexWrap","PostGridFlat","posts","css","filter","post","node","frontmatter","title","length","map","image","childImageSharp","gatsbyImage","getImage","customcolorCSS","colors","vibrant","Link","to","path","key","id","subtitle","strings","aboutMe","en","fr","homeCSS","Index","data","langCode","pageContext","location","postsInMyLang","allMdx","edges","language","MainLayout","SEO","theme","justifySelf","justifyItems","a","textAlign","themedACSS","palette","primary","main","moreProjectsCSS"],"sourceRoot":""}