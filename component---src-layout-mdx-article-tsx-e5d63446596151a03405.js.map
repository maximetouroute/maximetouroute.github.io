{"version":3,"file":"component---src-layout-mdx-article-tsx-e5d63446596151a03405.js","mappings":"k3BAYA,IAAMA,IAAqC,GACzCC,WAAY,OACZC,YAAa,OACbC,UAAW,OACXC,QAAS,OACTC,SAAU,OAGVC,eAAgB,kBACfC,EAAAA,EAAAA,IAAc,UAAW,CAExBD,eAAgB,eAChBH,UAAW,OAZ4B,EAezCK,EAfyC,QAgBpCC,EAAAA,EAAAA,GAAW,YAhByB,QAiBvCC,MAAO,QACPC,QAAS,SACTC,aAAc,WACdC,aAAc,SACbN,EAAAA,EAAAA,IAAc,UAAW,GArBa,OAuD5B,SAASO,EAAT,GAA6D,IAAjCC,EAAgC,EAAxCC,KAAQD,IAAOE,EAAyB,EAAzBA,SAAUC,EAAe,EAAfA,YAClDC,EAAqCD,EAArCC,aAAcC,EAAuBF,EAAvBE,SAAUC,EAAaH,EAAbG,SAE1BC,EAAmBH,GACvB,QAAC,EAAAI,KAAD,CAAMC,GAAIL,EAAaM,YAAYC,MAAnC,KACKP,EAAaM,YAAYE,QAG9B,oBAEIC,EAAeR,EACnBA,IACE,QAAC,EAAAG,KAAD,CAAMC,GAAIJ,EAASK,YAAYC,MAAON,EAASK,YAAYE,MAA3D,OAGF,oBAGF,OACE,QAAC,IAAD,CACEE,SAAUd,EAAIU,YAAYI,SAC1BZ,SAAQ,KAAOA,GACfa,YAAaf,EAAIU,YAAYM,MAAMC,OAAOC,UAE1C,QAAC,IAAD,CACEN,MAAOZ,EAAIU,YAAYE,MACvBO,YAAanB,EAAIU,YAAYS,aAAenB,EAAIU,YAAYU,SAC5DJ,MAAOhB,EAAIU,YAAYM,MAAMK,gBAAgBC,MAAMC,IACnDC,SAAUxB,EAAIU,YAAYC,KAC1Bc,SAAS,EACTnB,SAAUA,KAEZ,eACEoB,UAAU,qBACVC,GAAG,UACHC,IAAK,SAACC,GAAD,MAAY,CAAEC,gBAAiBD,EAAME,QAAQC,QAAQC,SAE1D,eAAKP,UAAU,YACb,cAAIA,UAAU,aAAa1B,EAAIU,YAAYE,QAC3C,cAAIc,UAAU,YACZ,kBACE,sBAAS1B,EAAIU,YAAYU,SAAzB,MACA,mBAAO,QAIb,eAAKQ,IAAK3C,GACPsB,EACAM,KAIL,eAAKa,UAAU,OAAOE,IAAK,SAACC,GAAD,OAAWK,EAAAA,EAAAA,IAAcL,MAClD,mBACEH,UAAU,OACVS,WAAS,EACTC,SAAS,kCAGT,eAAKV,UAAU,YACb,oBACA,oBAQA,QAAC,EAAAW,YAAD,CAAaC,WAAYC,EAAAA,KACvB,QAAC,EAAAC,YAAD,CACEC,aAAczC,EAAIU,YAAYgC,qBAC9BC,YAAa3C,EAAIU,YAAYkC,qBAE5B5C,EAAI6C,QAGT,eAAKjB,IAAK,SAACC,GAAD,OAxGE,SAACA,GAA6B,IAAD,IACnD,OAAO,EAAP,CACEzC,UAAW,OACXC,QAAS,OACTC,SAAU,OAGVC,eAAgB,kBACfC,EAAAA,EAAAA,IAAc,UAAW,CAExBD,eAAgB,eAChBH,UAAW,OAVf,EAaEK,EAbF,QAcOC,EAAAA,EAAAA,GAAWmC,EAAME,QAAQC,QAAQC,OAdxC,QAeIrC,QAAS,SACTC,aAAc,WACdC,aAAc,SACbN,EAAAA,EAAAA,IAAc,UAAW,GAlB9B,MAuG+BsD,CAAgBjB,KAClCtB,EACAM","sources":["webpack://maxime-touroute-portfolio/./src/layout/MdxArticle.tsx"],"sourcesContent":["import React from 'react'\nimport MainLayout from './MainLayout'\nimport { CSSObject, Theme } from '@emotion/react'\nimport './BasicPage.scss'\nimport 'moment'\nimport { MDXProvider } from '@mdx-js/react'\nimport { MDXRenderer } from 'gatsby-plugin-mdx'\nimport SEO from '../bits/SEO/SEO'\nimport { graphql, Link } from 'gatsby'\nimport { SHORTCODES } from './MdxBits'\nimport { injectLinkCSS, breakpointKey, themedACSS } from '../bits/styles/styles'\n\nconst nextPrevLinkInsideCoverCSS: CSSObject = {\n  marginLeft: '2rem',\n  marginRight: '2rem',\n  marginTop: '4rem',\n  display: 'flex',\n  flexWrap: 'wrap',\n  //filter: grayscale(1);\n\n  justifyContent: 'space-around',\n  [breakpointKey('small')]: {\n    // better style in case it takes two lines\n    justifyContent: 'space-around',\n    marginTop: '2em',\n  },\n\n  a: {\n    ...themedACSS('#ffffff'),\n    color: 'white',\n    padding: '0.75em',\n    textOverflow: 'ellipsis',\n    marginBottom: '1em',\n    [breakpointKey('small')]: {\n      // better style in case it takes two lines\n      // padding: 0.2em;\n    },\n  },\n}\n\nconst nextPrevLinkCSS = (theme: Theme): CSSObject => {\n  return {\n    marginTop: '4rem',\n    display: 'flex',\n    flexWrap: 'wrap',\n    //filter: grayscale(1);\n\n    justifyContent: 'space-around',\n    [breakpointKey('small')]: {\n      // better style in case it takes two lines\n      justifyContent: 'space-around',\n      marginTop: '2em',\n    },\n\n    a: {\n      ...themedACSS(theme.palette.primary.main),\n      padding: '0.75em',\n      textOverflow: 'ellipsis',\n      marginBottom: '1em',\n      [breakpointKey('small')]: {\n        // better style in case it takes two lines\n        // padding: 0.2em;\n      },\n    },\n  }\n}\n\nexport default function Template({ data: { mdx }, location, pageContext }) {\n  const { previousPost, nextPost, langCode } = pageContext\n  // content is at false is no previous or next\n  const previousPostHtml = previousPost ? (\n    <Link to={previousPost.frontmatter.path}>\n      ← {previousPost.frontmatter.title}\n    </Link>\n  ) : (\n    <div></div>\n  )\n  const nextPostHtml = nextPost ? (\n    nextPost && (\n      <Link to={nextPost.frontmatter.path}>{nextPost.frontmatter.title} →</Link>\n    )\n  ) : (\n    <div></div>\n  )\n\n  return (\n    <MainLayout\n      language={mdx.frontmatter.language}\n      location={{ ...location }}\n      accentColor={mdx.frontmatter.image.colors.vibrant}\n    >\n      <SEO\n        title={mdx.frontmatter.title}\n        description={mdx.frontmatter.description || mdx.frontmatter.subtitle}\n        image={mdx.frontmatter.image.childImageSharp.fixed.src}\n        pathname={mdx.frontmatter.path}\n        article={true}\n        langCode={langCode}\n      />\n      <div\n        className=\"basicPageCoverBand\"\n        id=\"content\"\n        css={(theme) => ({ backgroundColor: theme.palette.primary.main })}\n      >\n        <div className=\"overlay\">\n          <h1 className=\"punchline\">{mdx.frontmatter.title}</h1>\n          <h2 className=\"subtext\">\n            <p>\n              <strong>{mdx.frontmatter.subtitle} </strong>\n              <br />{' '}\n            </p>\n          </h2>\n        </div>\n        <div css={nextPrevLinkInsideCoverCSS}>\n          {previousPostHtml}\n          {nextPostHtml}\n        </div>\n      </div>\n\n      <div className=\"Page\" css={(theme) => injectLinkCSS(theme)}>\n        <article\n          className=\"card\"\n          itemScope\n          itemType=\"http://schema.org/BlogPosting\"\n        >\n          {/* css={theme => ({backgroundColor: theme.colors.accent})} */}\n          <div className=\"article\">\n            <br />\n            <br />\n            {/* <div css={colorCSS(mdx.frontmatter.image.colors.vibrant)}></div>\n            <div css={colorCSS(mdx.frontmatter.image.colors.darkVibrant)}></div>\n            <div css={colorCSS(mdx.frontmatter.image.colors.lightVibrant)}></div>\n            <div css={colorCSS(mdx.frontmatter.image.colors.muted)}></div>\n            <div css={colorCSS(mdx.frontmatter.image.colors.darkMuted)}></div>\n            <div css={colorCSS(mdx.frontmatter.image.colors.lightMuted)}></div> */}\n            {/* {JSON.stringify(mdx.frontmatter.image.colors)}*/}\n            <MDXProvider components={SHORTCODES}>\n              <MDXRenderer\n                remoteImages={mdx.frontmatter.embeddedImagesRemote}\n                localImages={mdx.frontmatter.embeddedImagesLocal}\n              >\n                {mdx.body}\n              </MDXRenderer>\n            </MDXProvider>\n            <div css={(theme) => nextPrevLinkCSS(theme)}>\n              {previousPostHtml}\n              {nextPostHtml}\n            </div>\n          </div>\n        </article>\n      </div>\n    </MainLayout>\n  )\n}\n\nexport const pageQuery = graphql`\n  query MdxArticleByPath($path: String!) {\n    mdx(frontmatter: { path: { eq: $path } }) {\n      body\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        path\n        title\n        subtitle\n        language\n        description\n        embeddedImagesRemote {\n          ...modernGatImage\n        }\n        embeddedImagesLocal {\n          ...modernGatImage\n        }\n        image {\n          colors {\n            ...GatsbyImageColors\n          }\n          childImageSharp {\n            # Other options include height (set both width and height to crop),\n            # grayscale, duotone, rotate, etc.\n            fixed(width: 700) {\n              # Choose either the fragment including a small base64ed image, a traced placeholder SVG, or one without.\n              ...GatsbyImageSharpFixed\n              src\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["nextPrevLinkInsideCoverCSS","marginLeft","marginRight","marginTop","display","flexWrap","justifyContent","breakpointKey","a","themedACSS","color","padding","textOverflow","marginBottom","Template","mdx","data","location","pageContext","previousPost","nextPost","langCode","previousPostHtml","Link","to","frontmatter","path","title","nextPostHtml","language","accentColor","image","colors","vibrant","description","subtitle","childImageSharp","fixed","src","pathname","article","className","id","css","theme","backgroundColor","palette","primary","main","injectLinkCSS","itemScope","itemType","MDXProvider","components","SHORTCODES","MDXRenderer","remoteImages","embeddedImagesRemote","localImages","embeddedImagesLocal","body","nextPrevLinkCSS"],"sourceRoot":""}