{"version":3,"sources":["webpack:///./src/layout/blog-post.js","webpack:///./src/components/photo-grid.js"],"names":["renderAst","rehype_react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","react__WEBPACK_IMPORTED_MODULE_1___default","components","photo-grid","_components_photo_grid__WEBPACK_IMPORTED_MODULE_6__","Compiler","Template","_ref","post","data","markdownRemark","_layout__WEBPACK_IMPORTED_MODULE_2__","className","style","backgroundImage","frontmatter","cover","childImageSharp","fixed","src","id","title","subtitle","Date","date","getFullYear","itemScope","itemType","htmlAst","pageQuery","photoGridProptypes","gatsbyImages","prop_types__WEBPACK_IMPORTED_MODULE_4___default","array","isRequired","PhotoGridTest","props","_this","_React$Component","call","this","state","photoIndex","isOpen","generatePicture","picture","index","margin","_this2","key","onClick","setState","generateGrid","pictures","numberPerRow","photoGrid","i","length","photoRow","columnIndex","push","render","_this3","_this$state","images","react_image_lightbox__WEBPACK_IMPORTED_MODULE_2___default","mainSrc","nextSrc","prevSrc","onCloseRequest","onMovePrevRequest","onMoveNextRequest","Component","PhotoGrid","srcs","children","filter","child","map","photo","href","propTypes","node","__webpack_exports__"],"mappings":"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","file":"component---src-layout-blog-post-js-84270b009d80fce02843.js","sourcesContent":["import React from 'react'\nimport Layout from './layout'\nimport './page.scss'\nimport 'moment'\nimport rehypeReact from \"rehype-react\"\nimport PhotoGrid from '../components/photo-grid';\nimport { graphql } from 'gatsby'\n\nconst renderAst = new rehypeReact({\n  createElement: React.createElement,\n  components: { \"photo-grid\": PhotoGrid },\n}).Compiler\n\nexport default function Template({ data }) {\n  const { markdownRemark: post } = data // data.markdownRemark holds our post data\n  return (\n    <Layout>\n      <div className=\"coverBand\"\n           style={{ backgroundImage: 'url(' + post.frontmatter.cover.childImageSharp.fixed.src + ')' }} id=\"content\">\n        <div className=\"overlay\">\n          <div className=\"punchline\">{post.frontmatter.title}</div>\n          <div className=\"subtext\">\n            <p><strong>{post.frontmatter.subtitle} </strong></p>\n            <p><em>{new Date(post.frontmatter.date).getFullYear()}</em></p>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"Page\">\n        <article className=\"card\" itemScope itemType=\"http://schema.org/BlogPosting\">\n          <div className=\"article\">\n            <br/><br/>\n            {renderAst(post.htmlAst)}\n          </div>\n        </article>\n      </div>\n    </Layout>\n  )\n}\n\n//  <div className=\"content\" itemProp=\"articleBody\" dangerouslySetInnerHTML={{ __html: post.html }}/>\n\n\nexport const pageQuery = graphql`\n    query BlogPostByPath($path: String!) {\n        markdownRemark(frontmatter: { path: { eq: $path } }) {\n            htmlAst # previously \\`html\\`\n            frontmatter {\n                date(formatString: \"MMMM DD, YYYY\")\n                path\n                title\n                subtitle\n                cover {\n                    childImageSharp {\n                        # Other options include height (set both width and height to crop),\n                        # grayscale, duotone, rotate, etc.\n                        fixed(width: 700) {\n                            # Choose either the fragment including a small base64ed image, a traced placeholder SVG, or one without.\n                            ...GatsbyImageSharpFixed\n                            src\n                        }\n\n                    }\n                }\n                \n            }\n        }\n    }`\n\n\n\n","import React from 'react';\nimport Lightbox from 'react-image-lightbox'\nimport 'react-image-lightbox/style.css' // This only needs to be imported once in your app\nimport PropTypes from 'prop-types'\nimport './photo-grid.scss';\n\n// DIRTY test for custom component.\n/*\n\nThe problem here :\n\nWe want to fetch the images from the markdown folder but graphql queries runned here cannot take any variable and doesnt have access to gatsby context\nThe only way I found to keep a clean syntax is to insert img tags directly in the markdown, they will be transformed by gatsby image (so responsive stuff and all)\nand then those urls can be used (props.href)\n */\n\nfunction styleBackgroundPhoto(src) {\n  return {\n    backgroundImage: 'url(' + src + ')',\n  }\n}\n\nconst photoGridProptypes = { gatsbyImages: PropTypes.array.isRequired }\nclass PhotoGridTest extends React.Component {\n\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      photoIndex: 0,\n      isOpen: false,\n    }\n\n  }\n\n  generatePicture(picture, index, margin) {\n    let className = margin ? `photoThumbnail marginRight` : `photoThumbnail`\n    return (\n      <div key={index} className={className} style={styleBackgroundPhoto(picture)}\n           onClick={() => this.setState({ isOpen: true, photoIndex: index })}/>\n    )\n  }\n\n  //numberPerRow is a WIP, needs changes in sass too\n  generateGrid(pictures, numberPerRow = 3) {\n\n    let photoGrid = []\n    for (let i = 0; i < pictures.length; i += numberPerRow) {\n\n      let photoRow = []\n\n      for (let columnIndex = 0; columnIndex < numberPerRow && i + columnIndex < pictures.length; columnIndex++) {\n        // handle margin right\n        if (columnIndex < numberPerRow) {\n          photoRow.push(this.generatePicture(pictures[i + columnIndex], i + columnIndex, true))\n        } else {\n          photoRow.push(this.generatePicture(pictures[i + columnIndex], i + columnIndex, false))\n        }\n      }\n      photoGrid.push(\n        <div key={i} className=\"photoRowContainer\">\n          {photoRow}\n        </div>,\n      )\n      photoRow = []\n    }\n    return photoGrid\n  }\n\n\n  render() {\n\n    const { isOpen, photoIndex } = this.state\n    const images = this.props.gatsbyImages;\n\n    return (\n      <div className=\"componentPhotoGrid\">\n        {isOpen && (\n\n          <Lightbox\n            mainSrc={images[photoIndex]}\n            nextSrc={images[(photoIndex + 1) % images.length]}\n            prevSrc={images[(photoIndex + images.length - 1) % images.length]}\n            onCloseRequest={() => this.setState({ isOpen: false })}\n            onMovePrevRequest={() =>\n              this.setState({\n                photoIndex: (photoIndex + images.length - 1) % images.length,\n              })\n            }\n            onMoveNextRequest={() =>\n              this.setState({\n                photoIndex: (photoIndex + 1) % images.length,\n              })\n            }\n          />\n        )}\n\n        <div className=\"photoGrid\">\n          {this.generateGrid(this.props.gatsbyImages)}\n        </div>\n      </div>\n\n    )\n  }\n\n}\n\nPhotoGridTest.propTypes = photoGridProptypes;\n\n\nfunction PhotoGrid({ children }) {\n  const photos = children.filter(child => typeof child !== 'string');\n  const srcs = photos.map(photo => photo.props.href);\n  return (\n    <PhotoGridTest gatsbyImages={srcs} />\n  );\n}\n\nPhotoGrid.propTypes = {\n  children: PropTypes.node.isRequired,\n};\n\nexport default PhotoGrid;"],"sourceRoot":""}