{"version":3,"file":"component---src-pages-index-js-74f14b4ee6075b3726b4.js","mappings":"2QAMMA,EAAqB,CACzBC,OAAQ,OACRC,QAAS,OACTC,cAAe,MACfC,eAAgB,SAChBC,SAAU,OACVC,SAAU,QAEVC,MAAO,OAEPC,QAAS,GAcI,SAASC,EAAT,GAA4C,IAApBC,EAAmB,EAAnBA,MAGrC,OAFAC,QAAQC,IAAIF,IAGV,eAAKG,IAAKb,GACPU,EACEI,QAAO,SAACC,GAAD,OAAUA,EAAKC,KAAKC,YAAYC,MAAMC,OAAS,KACtDC,KAAI,YAAqB,IAAZL,EAAW,EAAjBC,KACAK,EAAQN,EAAKE,YAAYI,MAAMC,gBAC/BC,GAAcC,EAAAA,EAAAA,GAASH,GAEvBI,OADgD,IAAlCV,EAAKE,YAAYI,MAAMK,OApB5C,CACL,UAAW,CACTC,MAoB+BZ,EAAKE,YAAYI,MAAMK,OAAOE,UACrD,GACJ,OACE,QAAC,EAAAC,KAAD,CACEC,UAAW,OACXC,GAAOhB,EAAKE,YAAYe,KAAtB,WACFC,IAAKlB,EAAKmB,GACVrB,IAAKY,IAEL,eAAKK,UAAW,aACd,gBAAMA,UAAU,aAAaf,EAAKE,YAAYC,QAC9C,gBAAMY,UAAU,gBACbf,EAAKE,YAAYkB,SAAU,OAGhC,QAAC,KAAD,CAASd,MAAOE,EAAaO,UAAW,qB,qkBClDvC,SAASM,EAAT,GAA+D,IAA9CC,EAA6C,EAA7CA,KAAqBC,EAAwB,EAAvCC,YAAeD,SAAYE,EAAY,EAAZA,SAGzDC,EADQJ,EAAKK,OAAOC,MACE7B,QAC1B,SAACC,GAAD,OAAUA,EAAKC,KAAKC,YAAY2B,WAAaN,KAG/C,OACE,QAACO,EAAA,EAAD,CAAYD,SAAUN,EAAUE,SAAQ,KAAOA,KAC7C,QAACM,EAAA,EAAD,CAAK5B,MAAO,OAAQoB,SAAUA,KAC9B,eAAKR,UAAU,SACb,QAAC,EAAD,CAAUpB,MAAO+B,KACjB,eAAKX,UAAU,iBACb,QAAC,EAAAD,KAAD,CAAME,GAAG,UAAT","sources":["webpack://maxime-touroute-portfolio/./src/bits/PostGridFlat/PostGridFlat.tsx","webpack://maxime-touroute-portfolio/./src/pages/index.js"],"sourcesContent":["import { CSSObject } from '@emotion/react'\nimport { Link } from 'gatsby'\nimport './PostGridFlat.scss'\nimport { BgImage } from 'gbimage-bridge'\nimport { getImage } from 'gatsby-plugin-image'\n\nconst gridCSS: CSSObject = {\n  margin: 'auto',\n  display: 'flex',\n  flexDirection: 'row',\n  justifyContent: 'center',\n  flexWrap: 'wrap',\n  maxWidth: '90rem',\n  // height: 30em;\n  width: '100%',\n\n  padding: 0,\n}\n\nconst customTextColorOnHover = (color: string): CSSObject => {\n  return {\n    '&:hover': {\n      color: color,\n    },\n  }\n}\n\ninterface OwnProps {\n  posts: any\n}\nexport default function PostGridFlat({ posts }: OwnProps) {\n  console.log(posts)\n\n  return (\n    <div css={gridCSS}>\n      {posts\n        .filter((post) => post.node.frontmatter.title.length > 0)\n        .map(({ node: post }) => {\n          const image = post.frontmatter.image.childImageSharp\n          const gatsbyImage = getImage(image)\n          const customColor = post.frontmatter.image.colors !== void 0\n          const customcolorCSS: CSSObject = customColor\n            ? customTextColorOnHover(post.frontmatter.image.colors.vibrant)\n            : {}\n          return (\n            <Link\n              className={'post'}\n              to={`${post.frontmatter.path}#content`}\n              key={post.id}\n              css={customcolorCSS}\n            >\n              <div className={'postHead'}>\n                <span className=\"postTitle\">{post.frontmatter.title}</span>\n                <span className=\"postSubtitle\">\n                  {post.frontmatter.subtitle}{' '}\n                </span>\n              </div>\n              <BgImage image={gatsbyImage} className={'postPicture'} />\n            </Link>\n          )\n        })}\n    </div>\n  )\n}\n","import React from 'react'\nimport { Link, graphql } from 'gatsby'\nimport MainLayout from '../layout/MainLayout'\nimport SEO from '../bits/SEO/SEO'\nimport PostGrid from '../bits/PostGridFlat/PostGridFlat'\nimport './index.scss'\n\nexport default function Index({ data, pageContext: { langCode }, location }) {\n  // const LOCAL = indexPageStrings[langCode];\n  const posts = data.allMdx.edges\n  const postsInMyLang = posts.filter(\n    (post) => post.node.frontmatter.language === langCode\n  )\n\n  return (\n    <MainLayout language={langCode} location={{ ...location }}>\n      <SEO title={'Home'} langCode={langCode} />\n      <div className=\"home\">\n        <PostGrid posts={postsInMyLang}></PostGrid>\n        <div className=\"moreProjects\">\n          <Link to=\"/about\">About me</Link>\n        </div>\n      </div>\n    </MainLayout>\n  )\n}\n\nexport const portfolioPostsQuery = graphql`\n  query IndexQuery {\n    allMdx(\n      sort: { order: ASC, fields: [frontmatter___priority] }\n      filter: { frontmatter: { category: { eq: \"portfolio\" } } }\n    ) {\n      edges {\n        node {\n          excerpt(pruneLength: 250)\n          id\n          frontmatter {\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            path\n            category\n            subtitle\n            language\n            image {\n              colors {\n                ...GatsbyImageColors\n              }\n              childImageSharp {\n                gatsbyImageData(height: 500, placeholder: BLURRED)\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["gridCSS","margin","display","flexDirection","justifyContent","flexWrap","maxWidth","width","padding","PostGridFlat","posts","console","log","css","filter","post","node","frontmatter","title","length","map","image","childImageSharp","gatsbyImage","getImage","customcolorCSS","colors","color","vibrant","Link","className","to","path","key","id","subtitle","Index","data","langCode","pageContext","location","postsInMyLang","allMdx","edges","language","MainLayout","SEO"],"sourceRoot":""}