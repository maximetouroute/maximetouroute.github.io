{"version":3,"sources":["webpack:///./node_modules/core-js/modules/es6.string.fixed.js","webpack:///./node_modules/core-js/modules/_string-html.js","webpack:///./node_modules/css-element-queries/src/ResizeSensor.js","webpack:///./node_modules/css-element-queries/index.js","webpack:///./node_modules/css-element-queries/src/ElementQueries.js"],"names":["__webpack_require__","createHTML","this","$export","fails","defined","quot","string","tag","attribute","value","S","String","p1","replace","module","exports","NAME","exec","O","P","F","test","toLowerCase","split","length","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_RESULT__","window","undefined","requestAnimationFrame","mozRequestAnimationFrame","webkitRequestAnimationFrame","fn","setTimeout","forEachElement","elements","callback","elementsType","Object","prototype","toString","call","isCollectionTyped","jQuery","Elements","i","j","getElementSize","element","getBoundingClientRect","width","offsetWidth","height","offsetHeight","rect","Math","round","ResizeSensor","EventQueue","q","add","ev","push","sizeInfo","remove","newQueue","attachResizeEvent","resized","resizedAttached","resizeSensor","document","createElement","dir","className","style","styleChild","cssText","innerHTML","appendChild","computedStyle","getComputedStyle","position","getPropertyValue","dirty","rafId","expand","childNodes","expandChild","shrink","size","lastWidth","lastHeight","initialHiddenCheck","lastAnimationFrame","reset","invisible","scrollLeft","scrollTop","resetSensor","onResized","onScroll","addEvent","el","name","cb","attachEvent","addEventListener","elem","detach","contains","removeChild","MutationObserver","observer","mutations","hasOwnProperty","items","addedNodes","event","observe","body","childList","subtree","ElementQueries","__WEBPACK_AMD_DEFINE_ARRAY__","cssStyleElement","allQueries","idToSelectorMapping","getEmSize","documentElement","fontSize","parseFloat","convertToPx","numbers","units","clientWidth","clientHeight","vw","vh","chooser","SetupInformation","id","key","option","elementSize","actualValue","attrValues","attrValue","attrName","attributes","property","mode","indexOf","k","setAttribute","substr","removeAttribute","setupElement","elementQueriesSetupInformation","elementQueriesSensor","queueQuery","selector","getQuery","container","query","querySelectorAll","bind","$$","attachResponsiveImage","children","rules","sources","defaultImageId","lastActiveImage","loadedImages","tagName","minWidth","getAttribute","src","rule","display","check","imageToDisplay","image","Image","onload","resizeSensorInstance","regex","attrRegex","extractQuery","css","match","smatch","attrs","attrMatch","readRules","type","selectorText","cssRules","styleSheet","defaultCssInjected","init","animationStart","e","target","styles","animationName","requiresSetup","sensorStyles","parseInt","getElementsByTagName","styleSheets","href","console","log","findResponsiveImages","findElementQueriesElements","update","instance","listen","navigator","userAgent","DOMLoadTimer","setInterval","readyState","clearInterval","domLoaded","apply"],"mappings":"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","file":"13-15195fc55e3da508e1ed.js","sourcesContent":["'use strict';\n// B.2.3.6 String.prototype.fixed()\nrequire('./_string-html')('fixed', function (createHTML) {\n  return function fixed() {\n    return createHTML(this, 'tt', '', '');\n  };\n});\n","var $export = require('./_export');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar quot = /\"/g;\n// B.2.3.2.1 CreateHTML(string, tag, attribute, value)\nvar createHTML = function (string, tag, attribute, value) {\n  var S = String(defined(string));\n  var p1 = '<' + tag;\n  if (attribute !== '') p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n};\nmodule.exports = function (NAME, exec) {\n  var O = {};\n  O[NAME] = exec(createHTML);\n  $export($export.P + $export.F * fails(function () {\n    var test = ''[NAME]('\"');\n    return test !== test.toLowerCase() || test.split('\"').length > 3;\n  }), 'String', O);\n};\n","'use strict';\n\n/**\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n * directory of this distribution and at\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n */\n(function (root, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define(factory);\n    } else if (typeof exports === \"object\") {\n        module.exports = factory();\n    } else {\n        root.ResizeSensor = factory();\n    }\n}(typeof window !== 'undefined' ? window : this, function () {\n\n    // Make sure it does not throw in a SSR (Server Side Rendering) situation\n    if (typeof window === \"undefined\") {\n        return null;\n    }\n    // Only used for the dirty checking, so the event callback count is limited to max 1 call per fps per sensor.\n    // In combination with the event based resize sensor this saves cpu time, because the sensor is too fast and\n    // would generate too many unnecessary events.\n    var requestAnimationFrame = window.requestAnimationFrame ||\n        window.mozRequestAnimationFrame ||\n        window.webkitRequestAnimationFrame ||\n        function (fn) {\n            return window.setTimeout(fn, 20);\n        };\n\n    /**\n     * Iterate over each of the provided element(s).\n     *\n     * @param {HTMLElement|HTMLElement[]} elements\n     * @param {Function}                  callback\n     */\n    function forEachElement(elements, callback){\n        var elementsType = Object.prototype.toString.call(elements);\n        var isCollectionTyped = ('[object Array]' === elementsType\n            || ('[object NodeList]' === elementsType)\n            || ('[object HTMLCollection]' === elementsType)\n            || ('[object Object]' === elementsType)\n            || ('undefined' !== typeof jQuery && elements instanceof jQuery) //jquery\n            || ('undefined' !== typeof Elements && elements instanceof Elements) //mootools\n        );\n        var i = 0, j = elements.length;\n        if (isCollectionTyped) {\n            for (; i < j; i++) {\n                callback(elements[i]);\n            }\n        } else {\n            callback(elements);\n        }\n    }\n\n    /**\n    * Get element size\n    * @param {HTMLElement} element\n    * @returns {Object} {width, height}\n    */\n    function getElementSize(element) {\n        if (!element.getBoundingClientRect) {\n            return {\n                width: element.offsetWidth,\n                height: element.offsetHeight\n            }\n        }\n\n        var rect = element.getBoundingClientRect();\n        return {\n            width: Math.round(rect.width),\n            height: Math.round(rect.height)\n        }\n    }\n\n    /**\n     * Class for dimension change detection.\n     *\n     * @param {Element|Element[]|Elements|jQuery} element\n     * @param {Function} callback\n     *\n     * @constructor\n     */\n    var ResizeSensor = function(element, callback) {\n        /**\n         *\n         * @constructor\n         */\n        function EventQueue() {\n            var q = [];\n            this.add = function(ev) {\n                q.push(ev);\n            };\n\n            var i, j;\n            this.call = function(sizeInfo) {\n                for (i = 0, j = q.length; i < j; i++) {\n                    q[i].call(this, sizeInfo);\n                }\n            };\n\n            this.remove = function(ev) {\n                var newQueue = [];\n                for(i = 0, j = q.length; i < j; i++) {\n                    if(q[i] !== ev) newQueue.push(q[i]);\n                }\n                q = newQueue;\n            };\n\n            this.length = function() {\n                return q.length;\n            }\n        }\n\n        /**\n         *\n         * @param {HTMLElement} element\n         * @param {Function}    resized\n         */\n        function attachResizeEvent(element, resized) {\n            if (!element) return;\n            if (element.resizedAttached) {\n                element.resizedAttached.add(resized);\n                return;\n            }\n\n            element.resizedAttached = new EventQueue();\n            element.resizedAttached.add(resized);\n\n            element.resizeSensor = document.createElement('div');\n            element.resizeSensor.dir = 'ltr';\n            element.resizeSensor.className = 'resize-sensor';\n            var style = 'pointer-events: none; position: absolute; left: 0px; top: 0px; right: 0; bottom: 0; ' +\n                'overflow: hidden; z-index: -1; visibility: hidden; max-width: 100%;';\n            var styleChild = 'position: absolute; left: 0; top: 0; transition: 0s;';\n\n            element.resizeSensor.style.cssText = style;\n            element.resizeSensor.innerHTML =\n                '<div class=\"resize-sensor-expand\" style=\"' + style + '\">' +\n                    '<div style=\"' + styleChild + '\"></div>' +\n                '</div>' +\n                '<div class=\"resize-sensor-shrink\" style=\"' + style + '\">' +\n                    '<div style=\"' + styleChild + ' width: 200%; height: 200%\"></div>' +\n                '</div>';\n            element.appendChild(element.resizeSensor);\n\n            var computedStyle = window.getComputedStyle(element);\n            var position = computedStyle ? computedStyle.getPropertyValue('position') : null;\n            if ('absolute' !== position && 'relative' !== position && 'fixed' !== position) {\n                element.style.position = 'relative';\n            }\n\n            var expand = element.resizeSensor.childNodes[0];\n            var expandChild = expand.childNodes[0];\n            var shrink = element.resizeSensor.childNodes[1];\n            var dirty, rafId;\n            var size = getElementSize(element);\n            var lastWidth = size.width;\n            var lastHeight = size.height;\n            var initialHiddenCheck = true;\n            var lastAnimationFrame = 0;\n\n            var resetExpandShrink = function () {\n                var width = element.offsetWidth;\n                var height = element.offsetHeight;\n\n                expandChild.style.width = (width + 10) + 'px';\n                expandChild.style.height = (height + 10) + 'px';\n\n                expand.scrollLeft = width + 10;\n                expand.scrollTop = height + 10;\n\n                shrink.scrollLeft = width + 10;\n                shrink.scrollTop = height + 10;\n            };\n\n            var reset = function() {\n                // Check if element is hidden\n                if (initialHiddenCheck) {\n                    var invisible = element.offsetWidth === 0 && element.offsetHeight === 0;\n                    if (invisible) {\n                        // Check in next frame\n                        if (!lastAnimationFrame){\n                            lastAnimationFrame = requestAnimationFrame(function(){\n                                lastAnimationFrame = 0;\n\n                                reset();\n                            });\n                        }\n\n                        return;\n                    } else {\n                        // Stop checking\n                        initialHiddenCheck = false;\n                    }\n                }\n\n                resetExpandShrink();\n            };\n            element.resizeSensor.resetSensor = reset;\n\n            var onResized = function() {\n                rafId = 0;\n\n                if (!dirty) return;\n\n                lastWidth = size.width;\n                lastHeight = size.height;\n\n                if (element.resizedAttached) {\n                    element.resizedAttached.call(size);\n                }\n            };\n\n            var onScroll = function() {\n                size = getElementSize(element);\n                dirty = size.width !== lastWidth || size.height !== lastHeight;\n\n                if (dirty && !rafId) {\n                    rafId = requestAnimationFrame(onResized);\n                }\n\n                reset();\n            };\n\n            var addEvent = function(el, name, cb) {\n                if (el.attachEvent) {\n                    el.attachEvent('on' + name, cb);\n                } else {\n                    el.addEventListener(name, cb);\n                }\n            };\n\n            addEvent(expand, 'scroll', onScroll);\n            addEvent(shrink, 'scroll', onScroll);\n\n            // Fix for custom Elements\n            requestAnimationFrame(reset);\n        }\n\n        forEachElement(element, function(elem){\n            attachResizeEvent(elem, callback);\n        });\n\n        this.detach = function(ev) {\n            ResizeSensor.detach(element, ev);\n        };\n\n        this.reset = function() {\n            element.resizeSensor.resetSensor();\n        };\n    };\n\n    ResizeSensor.reset = function(element) {\n        forEachElement(element, function(elem){\n            elem.resizeSensor.resetSensor();\n        });\n    };\n\n    ResizeSensor.detach = function(element, ev) {\n        forEachElement(element, function(elem){\n            if (!elem) return;\n            if(elem.resizedAttached && typeof ev === \"function\"){\n                elem.resizedAttached.remove(ev);\n                if(elem.resizedAttached.length()) return;\n            }\n            if (elem.resizeSensor) {\n                if (elem.contains(elem.resizeSensor)) {\n                    elem.removeChild(elem.resizeSensor);\n                }\n                delete elem.resizeSensor;\n                delete elem.resizedAttached;\n            }\n        });\n    };\n\n    if (typeof MutationObserver !== \"undefined\") {\n        var observer = new MutationObserver(function (mutations) {\n            for (var i in mutations) {\n                if (mutations.hasOwnProperty(i)) {\n                    var items = mutations[i].addedNodes;\n                    for (var j = 0; j < items.length; j++) {\n                        if (items[j].resizeSensor) {\n                            ResizeSensor.reset(items[j]);\n                        }\n                    }\n                }\n            }\n        });\n\n        document.addEventListener(\"DOMContentLoaded\", function (event) {\n            observer.observe(document.body, {\n                childList: true,\n                subtree: true,\n            });\n        });\n    }\n\n    return ResizeSensor;\n\n}));\n","module.exports = {\n    ResizeSensor: require('./src/ResizeSensor'),\n    ElementQueries: require('./src/ElementQueries')\n};\n","'use strict';\n\n/**\n * Copyright Marc J. Schmidt. See the LICENSE file at the top-level\n * directory of this distribution and at\n * https://github.com/marcj/css-element-queries/blob/master/LICENSE.\n */\n(function (root, factory) {\n    if (typeof define === \"function\" && define.amd) {\n        define(['./ResizeSensor.js'], factory);\n    } else if (typeof exports === \"object\") {\n        module.exports = factory(require('./ResizeSensor.js'));\n    } else {\n        root.ElementQueries = factory(root.ResizeSensor);\n        root.ElementQueries.listen();\n    }\n}(typeof window !== 'undefined' ? window : this, function (ResizeSensor) {\n\n    /**\n     *\n     * @type {Function}\n     * @constructor\n     */\n    var ElementQueries = function () {\n        //<style> element with our dynamically created styles\n        var cssStyleElement;\n\n        //all rules found for element queries\n        var allQueries = {};\n\n        //association map to identify which selector belongs to a element from the animationstart event.\n        var idToSelectorMapping = [];\n\n        /**\n         *\n         * @param element\n         * @returns {Number}\n         */\n        function getEmSize(element) {\n            if (!element) {\n                element = document.documentElement;\n            }\n            var fontSize = window.getComputedStyle(element, null).fontSize;\n            return parseFloat(fontSize) || 16;\n        }\n\n        /**\n         * Get element size\n         * @param {HTMLElement} element\n         * @returns {Object} {width, height}\n         */\n        function getElementSize(element) {\n            if (!element.getBoundingClientRect) {\n                return {\n                    width: element.offsetWidth,\n                    height: element.offsetHeight\n                }\n            }\n\n            var rect = element.getBoundingClientRect();\n            return {\n                width: Math.round(rect.width),\n                height: Math.round(rect.height)\n            }\n        }\n\n        /**\n         *\n         * @copyright https://github.com/Mr0grog/element-query/blob/master/LICENSE\n         *\n         * @param {HTMLElement} element\n         * @param {*} value\n         * @returns {*}\n         */\n        function convertToPx(element, value) {\n            var numbers = value.split(/\\d/);\n            var units = numbers[numbers.length - 1];\n            value = parseFloat(value);\n            switch (units) {\n                case \"px\":\n                    return value;\n                case \"em\":\n                    return value * getEmSize(element);\n                case \"rem\":\n                    return value * getEmSize();\n                // Viewport units!\n                // According to http://quirksmode.org/mobile/tableViewport.html\n                // documentElement.clientWidth/Height gets us the most reliable info\n                case \"vw\":\n                    return value * document.documentElement.clientWidth / 100;\n                case \"vh\":\n                    return value * document.documentElement.clientHeight / 100;\n                case \"vmin\":\n                case \"vmax\":\n                    var vw = document.documentElement.clientWidth / 100;\n                    var vh = document.documentElement.clientHeight / 100;\n                    var chooser = Math[units === \"vmin\" ? \"min\" : \"max\"];\n                    return value * chooser(vw, vh);\n                default:\n                    return value;\n                // for now, not supporting physical units (since they are just a set number of px)\n                // or ex/ch (getting accurate measurements is hard)\n            }\n        }\n\n        /**\n         *\n         * @param {HTMLElement} element\n         * @param {String} id\n         * @constructor\n         */\n        function SetupInformation(element, id) {\n            this.element = element;\n            var key, option, elementSize, value, actualValue, attrValues, attrValue, attrName;\n\n            var attributes = ['min-width', 'min-height', 'max-width', 'max-height'];\n\n            /**\n             * Extracts the computed width/height and sets to min/max- attribute.\n             */\n            this.call = function () {\n                // extract current dimensions\n                elementSize = getElementSize(this.element);\n\n                attrValues = {};\n\n                for (key in allQueries[id]) {\n                    if (!allQueries[id].hasOwnProperty(key)) {\n                        continue;\n                    }\n                    option = allQueries[id][key];\n\n                    value = convertToPx(this.element, option.value);\n\n                    actualValue = option.property === 'width' ? elementSize.width : elementSize.height;\n                    attrName = option.mode + '-' + option.property;\n                    attrValue = '';\n\n                    if (option.mode === 'min' && actualValue >= value) {\n                        attrValue += option.value;\n                    }\n\n                    if (option.mode === 'max' && actualValue <= value) {\n                        attrValue += option.value;\n                    }\n\n                    if (!attrValues[attrName]) attrValues[attrName] = '';\n                    if (attrValue && -1 === (' ' + attrValues[attrName] + ' ').indexOf(' ' + attrValue + ' ')) {\n                        attrValues[attrName] += ' ' + attrValue;\n                    }\n                }\n\n                for (var k in attributes) {\n                    if (!attributes.hasOwnProperty(k)) continue;\n\n                    if (attrValues[attributes[k]]) {\n                        this.element.setAttribute(attributes[k], attrValues[attributes[k]].substr(1));\n                    } else {\n                        this.element.removeAttribute(attributes[k]);\n                    }\n                }\n            };\n        }\n\n        /**\n         * @param {HTMLElement} element\n         * @param {Object}      id\n         */\n        function setupElement(element, id) {\n            if (!element.elementQueriesSetupInformation) {\n                element.elementQueriesSetupInformation = new SetupInformation(element, id);\n            }\n            if (!element.elementQueriesSensor) {\n                element.elementQueriesSensor = new ResizeSensor(element, function () {\n                    element.elementQueriesSetupInformation.call();\n                });\n            }\n\n            element.elementQueriesSetupInformation.call();\n        }\n\n        /**\n         * Stores rules to the selector that should be applied once resized.\n         *\n         * @param {String} selector\n         * @param {String} mode min|max\n         * @param {String} property width|height\n         * @param {String} value\n         */\n        function queueQuery(selector, mode, property, value) {\n            if (typeof(allQueries[selector]) === 'undefined') {\n                allQueries[selector] = [];\n                // add animation to trigger animationstart event, so we know exactly when a element appears in the DOM\n\n                var id = idToSelectorMapping.length;\n                cssStyleElement.innerHTML += '\\n' + selector + ' {animation: 0.1s element-queries;}';\n                cssStyleElement.innerHTML += '\\n' + selector + ' > .resize-sensor {min-width: '+id+'px;}';\n                idToSelectorMapping.push(selector);\n            }\n\n            allQueries[selector].push({\n                mode: mode,\n                property: property,\n                value: value\n            });\n        }\n\n        function getQuery(container) {\n            var query;\n            if (document.querySelectorAll) query = (container) ? container.querySelectorAll.bind(container) : document.querySelectorAll.bind(document);\n            if (!query && 'undefined' !== typeof $$) query = $$;\n            if (!query && 'undefined' !== typeof jQuery) query = jQuery;\n\n            if (!query) {\n                throw 'No document.querySelectorAll, jQuery or Mootools\\'s $$ found.';\n            }\n\n            return query;\n        }\n\n        /**\n         * If animationStart didn't catch a new element in the DOM, we can manually search for it\n         */\n        function findElementQueriesElements(container) {\n            var query = getQuery(container);\n\n            for (var selector in allQueries) if (allQueries.hasOwnProperty(selector)) {\n                // find all elements based on the extract query selector from the element query rule\n                var elements = query(selector, container);\n\n                for (var i = 0, j = elements.length; i < j; i++) {\n                    setupElement(elements[i], selector);\n                }\n            }\n        }\n\n        /**\n         *\n         * @param {HTMLElement} element\n         */\n        function attachResponsiveImage(element) {\n            var children = [];\n            var rules = [];\n            var sources = [];\n            var defaultImageId = 0;\n            var lastActiveImage = -1;\n            var loadedImages = [];\n\n            for (var i in element.children) {\n                if (!element.children.hasOwnProperty(i)) continue;\n\n                if (element.children[i].tagName && element.children[i].tagName.toLowerCase() === 'img') {\n                    children.push(element.children[i]);\n\n                    var minWidth = element.children[i].getAttribute('min-width') || element.children[i].getAttribute('data-min-width');\n                    //var minHeight = element.children[i].getAttribute('min-height') || element.children[i].getAttribute('data-min-height');\n                    var src = element.children[i].getAttribute('data-src') || element.children[i].getAttribute('url');\n\n                    sources.push(src);\n\n                    var rule = {\n                        minWidth: minWidth\n                    };\n\n                    rules.push(rule);\n\n                    if (!minWidth) {\n                        defaultImageId = children.length - 1;\n                        element.children[i].style.display = 'block';\n                    } else {\n                        element.children[i].style.display = 'none';\n                    }\n                }\n            }\n\n            lastActiveImage = defaultImageId;\n\n            function check() {\n                var imageToDisplay = false, i;\n\n                for (i in children) {\n                    if (!children.hasOwnProperty(i)) continue;\n\n                    if (rules[i].minWidth) {\n                        if (element.offsetWidth > rules[i].minWidth) {\n                            imageToDisplay = i;\n                        }\n                    }\n                }\n\n                if (!imageToDisplay) {\n                    //no rule matched, show default\n                    imageToDisplay = defaultImageId;\n                }\n\n                if (lastActiveImage !== imageToDisplay) {\n                    //image change\n\n                    if (!loadedImages[imageToDisplay]) {\n                        //image has not been loaded yet, we need to load the image first in memory to prevent flash of\n                        //no content\n\n                        var image = new Image();\n                        image.onload = function () {\n                            children[imageToDisplay].src = sources[imageToDisplay];\n\n                            children[lastActiveImage].style.display = 'none';\n                            children[imageToDisplay].style.display = 'block';\n\n                            loadedImages[imageToDisplay] = true;\n\n                            lastActiveImage = imageToDisplay;\n                        };\n\n                        image.src = sources[imageToDisplay];\n                    } else {\n                        children[lastActiveImage].style.display = 'none';\n                        children[imageToDisplay].style.display = 'block';\n                        lastActiveImage = imageToDisplay;\n                    }\n                } else {\n                    //make sure for initial check call the .src is set correctly\n                    children[imageToDisplay].src = sources[imageToDisplay];\n                }\n            }\n\n            element.resizeSensorInstance = new ResizeSensor(element, check);\n            check();\n        }\n\n        function findResponsiveImages() {\n            var query = getQuery();\n\n            var elements = query('[data-responsive-image],[responsive-image]');\n            for (var i = 0, j = elements.length; i < j; i++) {\n                attachResponsiveImage(elements[i]);\n            }\n        }\n\n        var regex = /,?[\\s\\t]*([^,\\n]*?)((?:\\[[\\s\\t]*?(?:min|max)-(?:width|height)[\\s\\t]*?[~$\\^]?=[\\s\\t]*?\"[^\"]*?\"[\\s\\t]*?])+)([^,\\n\\s\\{]*)/mgi;\n        var attrRegex = /\\[[\\s\\t]*?(min|max)-(width|height)[\\s\\t]*?[~$\\^]?=[\\s\\t]*?\"([^\"]*?)\"[\\s\\t]*?]/mgi;\n\n        /**\n         * @param {String} css\n         */\n        function extractQuery(css) {\n            var match, smatch, attrs, attrMatch;\n\n            css = css.replace(/'/g, '\"');\n            while (null !== (match = regex.exec(css))) {\n                smatch = match[1] + match[3];\n                attrs = match[2];\n\n                while (null !== (attrMatch = attrRegex.exec(attrs))) {\n                    queueQuery(smatch, attrMatch[1], attrMatch[2], attrMatch[3]);\n                }\n            }\n        }\n\n        /**\n         * @param {CssRule[]|String} rules\n         */\n        function readRules(rules) {\n            var selector = '';\n\n            if (!rules) {\n                return;\n            }\n\n            if ('string' === typeof rules) {\n                rules = rules.toLowerCase();\n                if (-1 !== rules.indexOf('min-width') || -1 !== rules.indexOf('max-width')) {\n                    extractQuery(rules);\n                }\n            } else {\n                for (var i = 0, j = rules.length; i < j; i++) {\n                    if (1 === rules[i].type) {\n                        selector = rules[i].selectorText || rules[i].cssText;\n                        if (-1 !== selector.indexOf('min-height') || -1 !== selector.indexOf('max-height')) {\n                            extractQuery(selector);\n                        } else if (-1 !== selector.indexOf('min-width') || -1 !== selector.indexOf('max-width')) {\n                            extractQuery(selector);\n                        }\n                    } else if (4 === rules[i].type) {\n                        readRules(rules[i].cssRules || rules[i].rules);\n                    } else if (3 === rules[i].type) {\n                        if(rules[i].styleSheet.hasOwnProperty(\"cssRules\")) {\n                            readRules(rules[i].styleSheet.cssRules);\n                        }\n                    }\n                }\n            }\n        }\n\n        var defaultCssInjected = false;\n\n        /**\n         * Searches all css rules and setups the event listener to all elements with element query rules..\n         */\n        this.init = function () {\n            var animationStart = 'animationstart';\n            if (typeof document.documentElement.style['webkitAnimationName'] !== 'undefined') {\n                animationStart = 'webkitAnimationStart';\n            } else if (typeof document.documentElement.style['MozAnimationName'] !== 'undefined') {\n                animationStart = 'mozanimationstart';\n            } else if (typeof document.documentElement.style['OAnimationName'] !== 'undefined') {\n                animationStart = 'oanimationstart';\n            }\n\n            document.body.addEventListener(animationStart, function (e) {\n                var element = e.target;\n                var styles = element && window.getComputedStyle(element, null);\n                var animationName = styles && styles.getPropertyValue('animation-name');\n                var requiresSetup = animationName && (-1 !== animationName.indexOf('element-queries'));\n\n                if (requiresSetup) {\n                    element.elementQueriesSensor = new ResizeSensor(element, function () {\n                        if (element.elementQueriesSetupInformation) {\n                            element.elementQueriesSetupInformation.call();\n                        }\n                    });\n\n                    var sensorStyles = window.getComputedStyle(element.resizeSensor, null);\n                    var id = sensorStyles.getPropertyValue('min-width');\n                    id = parseInt(id.replace('px', ''));\n                    setupElement(e.target, idToSelectorMapping[id]);\n                }\n            });\n\n            if (!defaultCssInjected) {\n                cssStyleElement = document.createElement('style');\n                cssStyleElement.type = 'text/css';\n                cssStyleElement.innerHTML = '[responsive-image] > img, [data-responsive-image] {overflow: hidden; padding: 0; } [responsive-image] > img, [data-responsive-image] > img {width: 100%;}';\n\n                //safari wants at least one rule in keyframes to start working\n                cssStyleElement.innerHTML += '\\n@keyframes element-queries { 0% { visibility: inherit; } }';\n                document.getElementsByTagName('head')[0].appendChild(cssStyleElement);\n                defaultCssInjected = true;\n            }\n\n            for (var i = 0, j = document.styleSheets.length; i < j; i++) {\n                try {\n                    if (document.styleSheets[i].href && 0 === document.styleSheets[i].href.indexOf('file://')) {\n                        console.log(\"CssElementQueries: unable to parse local css files, \" + document.styleSheets[i].href);\n                    }\n\n                    readRules(document.styleSheets[i].cssRules || document.styleSheets[i].rules || document.styleSheets[i].cssText);\n                } catch (e) {\n                }\n            }\n\n            findResponsiveImages();\n        };\n\n        /**\n         * Go through all collected rules (readRules()) and attach the resize-listener.\n         * Not necessary to call it manually, since we detect automatically when new elements\n         * are available in the DOM. However, sometimes handy for dirty DOM modifications.\n         *\n         * @param {HTMLElement} container only elements of the container are considered (document.body if not set)\n         */\n        this.findElementQueriesElements = function (container) {\n            findElementQueriesElements(container);\n        };\n\n        this.update = function () {\n            this.init();\n        };\n    };\n\n    ElementQueries.update = function () {\n        ElementQueries.instance.update();\n    };\n\n    /**\n     * Removes all sensor and elementquery information from the element.\n     *\n     * @param {HTMLElement} element\n     */\n    ElementQueries.detach = function (element) {\n        if (element.elementQueriesSetupInformation) {\n            //element queries\n            element.elementQueriesSensor.detach();\n            delete element.elementQueriesSetupInformation;\n            delete element.elementQueriesSensor;\n\n        } else if (element.resizeSensorInstance) {\n            //responsive image\n\n            element.resizeSensorInstance.detach();\n            delete element.resizeSensorInstance;\n        }\n    };\n\n    ElementQueries.init = function () {\n        if (!ElementQueries.instance) {\n            ElementQueries.instance = new ElementQueries();\n        }\n\n        ElementQueries.instance.init();\n    };\n\n    var domLoaded = function (callback) {\n        /* Mozilla, Chrome, Opera */\n        if (document.addEventListener) {\n            document.addEventListener('DOMContentLoaded', callback, false);\n        }\n        /* Safari, iCab, Konqueror */\n        else if (/KHTML|WebKit|iCab/i.test(navigator.userAgent)) {\n            var DOMLoadTimer = setInterval(function () {\n                if (/loaded|complete/i.test(document.readyState)) {\n                    callback();\n                    clearInterval(DOMLoadTimer);\n                }\n            }, 10);\n        }\n        /* Other web browsers */\n        else window.onload = callback;\n    };\n\n    ElementQueries.findElementQueriesElements = function (container) {\n        ElementQueries.instance.findElementQueriesElements(container);\n    };\n\n    ElementQueries.listen = function () {\n        domLoaded(ElementQueries.init);\n    };\n\n    return ElementQueries;\n\n}));\n"],"sourceRoot":""}